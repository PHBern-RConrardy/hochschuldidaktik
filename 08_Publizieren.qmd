# Publizieren: Quarto Pub, GitHub Pages und ILIAS

In diesem Kapitel siehst du drei Wege, um deine Quarto-Webseite für Studierende und Kolleginnen und Kollegen zugänglich zu machen. Wir gehen Schritt für Schritt vor – ohne Git-Vorkenntnisse.


## Überblick: Welche Option passt?

| Ziel | Vorteile | Aufwand beim Aktualisieren |
|---|---|---|
| **Quarto Pub** | Sehr einfach, direkter Upload aus Positron/RStudio; schöne URL | Neu rendern und erneut veröffentlichen |
| **GitHub Pages** | Kostenlos, öffentlich erreichbar; guter Standardweg fürs Web | Neu rendern, Dateien erneut in GitHub hochladen |
| **ILIAS (HTML-Objekt)** | Intern in ILIAS verfügbar | Neu rendern, ZIP neu hochladen (kein „Push“) |

Hinweis: Mit deiner **@phbern.ch**-Adresse bekommst du in der Regel Zugang zu einer **Campus-/Education-Version** bei GitHub (zusätzliche Vorteile). Falls etwas nicht klappt, wende dich an den IT-Support der PHBern.


## Vorbereitung (für alle Wege)

1. Öffne dein Projekt (z. B. die Website aus dem Kapitel „Webseite organisieren“).  
2. Klicke auf **Render**.  
3. Die fertigen Dateien liegen im Ordner **`_site/`** (Startseite: `index.html`).

> Tipp: Teste lokal, indem du die `index.html` aus `_site/` im Browser öffnest.


## A) Veröffentlichen mit Quarto Pub (sehr einfach)

**Ohne Terminal**, direkt aus Positron:

1. Öffne das Projekt in **Positron**.  
2. Öffne die **Command Palette** (z. B. `Ctrl+Shift+P` / `Cmd+Shift+P`).  
3. Wähle **„Quarto: Publish“**.  
4. Ziel: **Quarto Pub**.  
5. Melde dich an (einmalig Konto erstellen).  
6. Bestätige die Veröffentlichung. Quarto Pub erstellt die Seite und zeigt dir den Link.

Optional (falls du lieber die Kommandozeile nutzt):

```bash
quarto publish quarto-pub
```

Du wirst einmalig gefragt, dich anzumelden. Danach kannst du mit einem Klick bzw. Befehl neu veröffentlichen.


## B) Veröffentlichen mit GitHub Pages (ohne Git-Kenntnisse)

Du brauchst ein kostenloses **GitHub-Konto**. Mit der @phbern.ch-Adresse erhältst du in der Regel **Education-/Campus-Vorteile**.

**Schritt 1: Repository anlegen**  
1. Auf github.com anmelden.  
2. Oben rechts **„+“ → New repository“**.  
3. Name vergeben (z. B. `meine-quarto-webseite`).  
4. Sichtbarkeit: **Public** (für offenen Zugang) oder **Private** (nur für dich/Team).  
5. **Create repository**.

**Schritt 2: Fertige Website-Dateien hochladen**  
1. Öffne deinen neuen Repository-Startbildschirm.  
2. Klicke **„Add file → Upload files“**.  
3. Wechsle lokal in deinen Projektordner **`_site/`**.  
4. Markiere **alle Inhalte von `_site/`** (nicht den Ordner selbst) und **ziehe** sie ins Upload-Feld.  
5. Scrolle nach unten und klicke **„Commit changes“**.

**Schritt 3: GitHub Pages aktivieren**  
1. Im Repo auf **„Settings“** klicken.  
2. Links **„Pages“** auswählen.  
3. Unter **„Build and deployment“** wähle **„Deploy from a branch“**.  
4. **Branch:** `main` — **Folder:** `/ (root)` (Root-Ebene).  
5. Speichern. GitHub baut die Seite und zeigt nach kurzer Zeit den Link an.

**Aktualisieren**  
- Lokal neu **Rendern** → Ordner **`_site/`** → wieder **„Add file → Upload files“** → alle Dateien ersetzen → **Commit changes**.  
- Git muss dafür nicht installiert sein; du nutzt nur die GitHub-Weboberfläche.


## C) In ILIAS als HTML-Objekt bereitstellen

So bringst du die Seite in einen ILIAS-Kurs – ohne externe Veröffentlichung.

**Schritt 1: ZIP erstellen**  
1. Öffne den Ordner **`_site/`**.  
2. Wähle **alle Inhalte** von `_site/` aus (nicht den Ordner selbst).  
3. Erstelle daraus ein **ZIP** (z. B. Rechtsklick → „Senden an → ZIP“).

**Schritt 2: In ILIAS hochladen**  
1. Im gewünschten ILIAS-Kurs: **Neues Objekt** hinzufügen.  
2. Wähle **„HTML-Lernmodul“** (Bezeichnung kann je nach ILIAS-Version leicht abweichen).  
3. Lade die **ZIP-Datei** hoch.  
4. Speichern/Veröffentlichen.

**Wichtig zum Aktualisieren**  
- Für jede Änderung: lokal neu **Rendern**, **neues ZIP** aus den Inhalten von `_site/` erstellen und in ILIAS **neu hochladen**.  
- Es gibt **kein direktes „Push“/Synchronisieren** wie bei Quarto Pub oder GitHub.


## Kurzer Exkurs: Was ist Git/GitHub? (optional)

- **Git** ist ein Versionierungssystem: Es merkt sich Änderungen an Dateien.  
- **GitHub** ist ein Online-Dienst, der Git-Projekte hostet und Websites (GitHub Pages) bereitstellt.  
- Für dieses Kapitel brauchst du **kein Git-Programm** – die GitHub-Weboberfläche reicht.  
- Später lohnt es sich, Git zu lernen (bessere Zusammenarbeit, schnellere Updates).

Wenn du Git irgendwann nutzen möchtest, können wir ein extra Kapitel mit der **minimalen Praxis** (3–4 Befehle) schreiben.


## Typische Fehlerquellen und Lösungen

- **Leere/weiße Seite**: Prüfe, ob wirklich die **Inhalte von `_site/`** hochgeladen wurden (nicht der Ordner).  
- **Falsche Links/Bilder**: Verwende relative Pfade (z. B. `images/logo.png`) und achte auf exakte Dateinamen.  
- **Navigation kaputt**: YAML-Einrückungen in `_quarto.yml` kontrollieren (nur Leerzeichen, gleiche Ebene).  
- **GitHub Pages-Link fehlt**: In den Repo-**Settings → Pages** prüfen; ggf. noch einmal auf **„Save“** klicken und kurz warten.


## Zusammenfassung

- **Quarto Pub**: Schnellster Weg, sehr einfach.  
- **GitHub Pages**: Kostenlos, ideal fürs öffentliche Web. Upload per Browser reicht.  
- **ILIAS**: Für interne Nutzung; Updates erfordern neues ZIP.  

Bei Fragen zur Campus-/Education-Nutzung mit **@phbern.ch** unterstützt dich der **PHBern-IT-Support**.
