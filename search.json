[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quarto für die PHBern",
    "section": "",
    "text": "1 Was ist Quarto?",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Was ist Quarto?</span>"
    ]
  },
  {
    "objectID": "index.html#was-ist-quarto-1",
    "href": "index.html#was-ist-quarto-1",
    "title": "Quarto für die PHBern",
    "section": "1.1 Was ist Quarto?",
    "text": "1.1 Was ist Quarto?\n\nQuarto ist ein modernes Open-Source-Publikationssystem, mit dem du wissenschaftliche Inhalte in verschiedenen Formaten erzeugen kannst, z. B. Webseiten, PDF-Dokumente, Präsentationen und mehr, alles aus einem einzigen Dokument.\n\nQuarto basiert auf Markdown, einem leicht erlernbaren Textformat, und kann sowohl statischen Inhalt (Text, Bilder, Tabellen) als auch dynamischen Inhalt (z. B. R- oder Python-Code) integrieren.\nQuarto ist der offizielle Nachfolger von R Markdown und wurde für eine grössere Zielgruppe entwickelt.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Was ist Quarto?</span>"
    ]
  },
  {
    "objectID": "index.html#was-kann-ich-mit-quarto-erstellen",
    "href": "index.html#was-kann-ich-mit-quarto-erstellen",
    "title": "Quarto für die PHBern",
    "section": "1.2 Was kann ich mit Quarto erstellen?",
    "text": "1.2 Was kann ich mit Quarto erstellen?\n\n\n\nFormat\nAnwendung in der Lehre\n\n\n\n\nPräsentationen\nSlides für Lerngelegenheiten\n\n\nPDF / Word\nHandouts, Prüfungen, Skripte\n\n\nWebseiten\nKurswebseiten, Forschungsprojekte, ePortfolios\n\n\n\nAlles aus einer einzigen Textdatei!\n\n\nWord\n---\ntitle: \"Reichhaltige Motivation\"\nauthor: Richard Conrardy\nformat: docx\n---\n# Überschrift 1\n## Überschrift 1.1\n\nWebseite\n---\ntitle: \"Reichhaltige Motivation\"\nauthor: Richard Conrardy\nformat: html\n---\n# Überschrift 1\n## Überschrift 1.1\n\nSlides\n---\ntitle: \"Reichhaltige Motivation\"\nauthor: Richard Conrardy\nformat: revealjs\n---\n# Kapitel 1\n## Slide 1\n\nPowerpoint\n---\ntitle: \"Reichhaltige Motivation\"\nauthor: Richard Conrardy\nformat: pptx\n---\n# Kapitel 1\n## Slide 1\n\n\nDu kannst sogar gleichzeitig mehrere Formate generieren und verlinken, so können Studierende den Inhalt der Präsentation sofort als Word downloaden:\n---\ntitle: \"Reichhaltige Motivation\"\nauthor: Richard Conrardy\nformat: \n  revealjs: default\n  docx: default\n---\n# Überschrift 1\n## Slide 1",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Was ist Quarto?</span>"
    ]
  },
  {
    "objectID": "index.html#beispiel-1-lehr-slides-mit-quellenangaben",
    "href": "index.html#beispiel-1-lehr-slides-mit-quellenangaben",
    "title": "Quarto für die PHBern",
    "section": "1.3 Beispiel 1: Lehr-Slides mit Quellenangaben",
    "text": "1.3 Beispiel 1: Lehr-Slides mit Quellenangaben\nQuarto-Präsentationen lassen sich in wenigen Sekunden in Reveal.js, PowerPoint oder PDF (Beamer) umwandeln, inklusive:\n\nautomatischer Quellenangaben und verwalteter Zitationsstyl\neingebetteter Bilder, Diagramme und Formeln mit Aufzählung (Abbildung 1: …)\noptional: interaktive Inhalte (Diagramme, Code-Ausgabe)\n\n---\ntitle: \"Einführung in Statistik\"\nformat: revealjs\nbibliography: literatur.bib\ncsl: apa.csl\n---\n\n## Deskriptive Statistik\n\n- Mittelwert, Median, Modus\n- Standardabweichung, Varianz\n\n&gt; Qualitative Inhaltsanalyse stellt eine Auswertungsmethode dar, [@Mayring2022, S.691]\n\n::: {#refs}\n:::\nDie Quelle (Mayring2022?) wird automatisch als Fussnote bzw. Literaturangabe eingefügt, sofern sie in der Datei literatur.bib vorhanden ist. Die apa.csl defniert den Zitationsstil (APA7, Chigago, …).\nDas Literaturverzeichnis wird automatisch an den Schluss gestellt oder wird explizit mit dem Shortcode :::{#refs}platziert.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Was ist Quarto?</span>"
    ]
  },
  {
    "objectID": "index.html#beispiel-statische-webseite-für-deine-lehrveranstaltung",
    "href": "index.html#beispiel-statische-webseite-für-deine-lehrveranstaltung",
    "title": "Quarto für die PHBern",
    "section": "1.4 Beispiel: Statische Webseite für deine Lehrveranstaltung",
    "text": "1.4 Beispiel: Statische Webseite für deine Lehrveranstaltung\nQuarto unterstützt den Aufbau vollständiger Webseitenprojekte, z. B. für Seminare oder Forschungsprojekte.\n\n\n\n\n\n\n\n\n\n\n\n(a) Webseite mit Linksammlungen für Eigengebrauch\n\n\n\n\n\n\n\n\n\n\n\n(b) Webseite für Lernende\n\n\n\n\n\n\n\nAbbildung 1.1: Beispiele von Webseiten\n\n\n\nWebseiten werden durch die Benutzung einer spezieller Ordnerstruktur angelegt.\nProjektstruktur:\n📁 mein-kurs/\n├── _quarto.yml\n├── index.qmd         # Startseite\n├── literatur.qmd     # Literaturverzeichnis\n├── sitzung1.qmd\n├── sitzung2.qmd\n└── ...\nDabei ist index.qmd immer die Startseite und _quarto.yml(ausgesprochen Yaml) ist die Konfigurationsdatei, in der du Meta-Informationen zur Webseite angibst (z.B. Farben oder Literaturliste).\nBeispielhafte Konfiguration (_quarto.yml):\nproject:\n  type: website\n\nwebsite:\n  title: \"Digitale Didaktik\"\n  navbar:\n    left:\n      - text: \"Start\"\n        file: index.qmd\n      - text: \"Literatur\"\n        file: literatur.qmd\nDiese Seite, welche du gerade liest, ist übrigens eine leichte Abwandlung einer Webseite, sie wurde mit type: bookerstellt, weshalb die Kapitel auch nummeriert sind.\nDie fertige Webseite wird aufgrund der Textdateien (.qmd) mit einem Knopfdruck in einem speziellen Textprogramm erstellt (genauer: kompiliert). Alternativ kannst du es auch über einen Befehl im Terminal erstellen lassen:\nquarto render\nDie Webseite kannst du problemlos gratis und werbefrei publizieren, auch das ist ein simpler Befehl im Terminal quarto publish. Beispielsweise kannst du es über Github oder Quartopub publizieren.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Was ist Quarto?</span>"
    ]
  },
  {
    "objectID": "index.html#vorteile-für-dozierende",
    "href": "index.html#vorteile-für-dozierende",
    "title": "Quarto für die PHBern",
    "section": "1.5 Vorteile für Dozierende",
    "text": "1.5 Vorteile für Dozierende\n\n\n\n\n\n\n\nVorteil\nBeschreibung\n\n\n\n\nEffizienz\nEin Dokument, viele Ausgabeformate\n\n\nWissenschaftlich\nAutomatische Literaturverweise, APA, MLA, Chicago etc.\n\n\nWiederverwendbar\nInhalte lassen sich modular aufbauen\n\n\nOffen & nachhaltig\nOffenes Textformat, langfristig lesbar, versionierbar\n\n\nErweiterungen\nJedermann kann und darf Erweiterungen für Quarto schreiben und veröffentlichen",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Was ist Quarto?</span>"
    ]
  },
  {
    "objectID": "02_wo_schreibe_ich.html",
    "href": "02_wo_schreibe_ich.html",
    "title": "2  Quarto starten ohne Terminal",
    "section": "",
    "text": "2.1 Was ist ein Terminal?\nEin Terminal (auch “Befehlszeile” oder “Konsole”) ist ein Textfenster, in dem du direkt Befehle an den Computer schreibst. Auf MacOS heisst das Programm tatsächlich Terminal, auf Windows kann auch die Powershellgenutzt werden.\nEin typisches Beispiel (unter Windows): `quarto render dokument.qmd``\nDieser Befehl sagt Quarto: “Bitte render (erstelle) das Dokument dokument.qmd.” Die .qmd-Datei ist eine reine Textdatei, ähnlich .txt-Dateien, somit können sie grundsätzlich mit jedem Texteditor (ja, sogar Word) geöffnet und bearbeitet werden.\nFür viele Lehrende ist das Terminal ungewohnt oder abschreckend. Die gute Nachricht:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Quarto starten ohne Terminal</span>"
    ]
  },
  {
    "objectID": "02_wo_schreibe_ich.html#was-ist-ein-terminal",
    "href": "02_wo_schreibe_ich.html#was-ist-ein-terminal",
    "title": "2  Quarto starten ohne Terminal",
    "section": "",
    "text": "Du musst das Terminal nicht nutzen, um mit Quarto zu arbeiten!",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Quarto starten ohne Terminal</span>"
    ]
  },
  {
    "objectID": "02_wo_schreibe_ich.html#mit-welchem-programm-schreibe-ich",
    "href": "02_wo_schreibe_ich.html#mit-welchem-programm-schreibe-ich",
    "title": "2  Quarto starten ohne Terminal",
    "section": "2.2 Mit welchem Programm schreibe ich?",
    "text": "2.2 Mit welchem Programm schreibe ich?\nQuarto selbst ist ein sogenanntes CLI-Programm (Command Line Interface). Es läuft im Hintergrund über die Befehlszeile, selbst wenn du es über RStudio oder VS Code bedienst.\nDas bedeutet: - Die Benutzeroberfläche (GUI) ist nicht in Quarto selbst enthalten. - Aber: Viele moderne Editoren können Quarto einbetten, damit wird alles bequem klickbar.\nDu arbeitest also vor allem mit einem Editor (spezielles Textprogramm) deiner Wahl.\nGrobe Installationsanleitung:\n\nInstalliere Quarto wie du typischerweise Programme in deinem Betriebssystem installierst.\nWähle einen Editor aus, z.B. ist Visual Studio Code von Microsoft verbreitet, aber auch Positron oder R Studio, beides von den Machern von Quarot, ist beliebt.\nIn deinem Editor installierst du eine Extension spezifisch für Quarto. (Bei R Studio ist Quarto bereits vorinstalliert.)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Quarto starten ohne Terminal</span>"
    ]
  },
  {
    "objectID": "02_wo_schreibe_ich.html#user-interface",
    "href": "02_wo_schreibe_ich.html#user-interface",
    "title": "2  Quarto starten ohne Terminal",
    "section": "2.3 User-Interface",
    "text": "2.3 User-Interface\nAlle drei vorgeschlagenen Programme haben ein ähnliches Userinterface und eine Möglichkeit den Quelltext (.qmd) neben dem Ausgabeformat (Webseite, Wordfile, etc.) anzeigen zu lassen.\n\nRStudioVisual Studio CodePositron\n\n\nRStudio kann über den Softwareinstaller an der PHBern auf managed Geräten installiert werden. Quarto ist integriert im Installer. Somit hast du alles was du brauchst um Quarto zum laufen zu bringen.\nRStudio ist eigentlich auf statistische Auswertungen mit R spezialisiert, das User-Interface sieht vielleicht etwas altbacken oder überlastet aus.\nSchritt-für-Schritt Anleitung\n\nInstallier R und RStudio (falls noch nicht vorhanden)\n\nhttps://posit.co/download/rstudio-desktop/\n\nNeues Projekt anlegen (File &gt; New Project)\nNeue Quarto-Datei erstellen (File &gt; New File &gt; Quarto Document)\nRendern durch Klick auf den “Render”-Button\n\n\n\n\n\n\n\nAbbildung 2.1: GUI in Rstudio wenn du ein neues Projekt mit File &gt; New Project erstellst\n\n\n\n\n\n\n\n\n\nAbbildung 2.2: Render-Button\n\n\n\n\n\nVS Code ist ein sehr mächtiger Editor aber kann technisch einschüchternd wirken.\nVoraussetzungen:\n\nVisual Studio Code\nQuarto CLI (muss installiert sein)\nQuarto VS Code Extension\n\nSchritt-für-Schritt:\n\nQuarto installieren (wie oben)\nVS Code installieren\nQuarto-Erweiterung installieren:\n\nÖffne den Extensions-Tab (Symbol: Blöcke)\nSuche nach “Quarto”\nKlicke auf „Installieren“\n\n\n\n\n\n\n\n\nAbbildung 2.3: GUI in VSCode mit der installierten Quarto Extension\n\n\n\n\nNeue .qmd-Datei erstellen → Datei &gt; Neu\nOben erscheint eine “Render”-Schaltfläche, sobald eine .qmd-Datei aktiv ist\n\n\n\n\n\n\n\nAbbildung 2.4: Render-Button (Zeitungssymbol)\n\n\n\n\n\nPositron ist ein neuer, schlanker Editor speziell für Quarto, noch in Entwicklung (Stand: 2025), aber vielversprechend.\nVorteile: - Minimalistisch, kein R oder VS Code nötig - Fokus auf .qmd-Dateien - Eingebaute Quarto-Unterstützung\n\n\n\n\n\n\nAbbildung 2.5: Positron-Fenster in welchem in grerade diese Anleitung schreibe\n\n\n\n\n\n\n\n\n\nAbbildung 2.6: Render Button heisst hier “Preview” mit Zeitungssymbol",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Quarto starten ohne Terminal</span>"
    ]
  },
  {
    "objectID": "02_wo_schreibe_ich.html#test-ist-quarto-installiert",
    "href": "02_wo_schreibe_ich.html#test-ist-quarto-installiert",
    "title": "2  Quarto starten ohne Terminal",
    "section": "2.4 Test: Ist Quarto installiert?",
    "text": "2.4 Test: Ist Quarto installiert?\nWenn du dir nicht sicher sind, ob Quarto korrekt installiert ist, kannst du das Terminal öffnen und folgendes eingeben:\nquarto check\n\n\n\n\n\n\nTipp\n\n\n\nDie Anleitung wird R Studio als Basis nehmen, da es für viele Dozierende über den internen Appstore verfügbar ist. Der Autor bevorzugt jedoch Positron, da es leicht schneller startet und moderner aussieht.\nDa Quarto ja eigentlich in der Befehlszeile existiert, spielt es aber gar keine Rolle und du kannst auch Microsoft Notepad in MS-DOS nutzen.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Quarto starten ohne Terminal</span>"
    ]
  },
  {
    "objectID": "03_erstes_Dokument.html",
    "href": "03_erstes_Dokument.html",
    "title": "3  Dein erstes Quarto-Dokument",
    "section": "",
    "text": "3.1 Starte den Editor\nNun, da Quarto installiert ist, machen wir gemeinsam dein erstes Dokument. Du brauchst dafür kein Vorwissen über Programmieren oder Fachbegriffe wie „Terminal“ – versprochen!\nWir arbeiten Schritt für Schritt.\nÖffne RStudio auf deinem Computer.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Dein erstes Quarto-Dokument</span>"
    ]
  },
  {
    "objectID": "03_erstes_Dokument.html#starte-den-editor",
    "href": "03_erstes_Dokument.html#starte-den-editor",
    "title": "3  Dein erstes Quarto-Dokument",
    "section": "",
    "text": "Abbildung 3.1: RStudio ohne geöffnetes Dokument",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Dein erstes Quarto-Dokument</span>"
    ]
  },
  {
    "objectID": "03_erstes_Dokument.html#neues-quarto-dokument-erstellen",
    "href": "03_erstes_Dokument.html#neues-quarto-dokument-erstellen",
    "title": "3  Dein erstes Quarto-Dokument",
    "section": "3.2 Neues Quarto-Dokument erstellen",
    "text": "3.2 Neues Quarto-Dokument erstellen\nKlicke oben links auf File → New File → Quarto Document…\n   Ein neues Fenster erscheint. Dort kannst du folgende Angaben machen:\n\nTitle: Gib z. B. „Mein erstes Quarto-Dokument“ ein\n\nAuthor: Deinen Namen\n\nFormat: Wähle „HTML“\n\nUse visual markdown editor darauf verzichten wir momentan. Es kann jederzeit später mit einem Mausklick geändert werden.\nKlicke auf Create\n\n\n\n\n\n\n\nAbbildung 3.2: RStudio ohne geöffnetes Dokument",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Dein erstes Quarto-Dokument</span>"
    ]
  },
  {
    "objectID": "03_erstes_Dokument.html#überblick-über-das-dokument",
    "href": "03_erstes_Dokument.html#überblick-über-das-dokument",
    "title": "3  Dein erstes Quarto-Dokument",
    "section": "3.3 Überblick über das Dokument",
    "text": "3.3 Überblick über das Dokument\nQuarto zeigt dir nun ein neues Dokument mit etwas Text. So sieht der Anfang aus:\n---\ntitle: \"Mein erstes Quarto-Dokument\"\nauthor: \"Max Muster\"\nformat: html\n---\n\n## Einführung\n\nDies ist mein erstes Quarto-Dokument.\n\nWas wichtig ist schreibe ich *kursiv*, was sehr wichtig schreibe ich **fett**.\nWas du oben siehst, nennt sich YAML-Header (der Teil zwischen ---), da stehen Titel, Autor:in und das gewünschte Format. Du musst ihn meistens nicht verändern.\nDer Rest ist Text, den du einfach schreiben kannst.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Dein erstes Quarto-Dokument</span>"
    ]
  },
  {
    "objectID": "03_erstes_Dokument.html#dokument-rendern-also-erstellen",
    "href": "03_erstes_Dokument.html#dokument-rendern-also-erstellen",
    "title": "3  Dein erstes Quarto-Dokument",
    "section": "3.4 Dokument „rendern“ (also erstellen)",
    "text": "3.4 Dokument „rendern“ (also erstellen)\nKlicke nun auf den blauen Render-Button oben rechts. Quarto erstellt daraus eine Webseite (HTML-Datei), die automatisch angezeigt wird.\n\n\n\n\n\n\nAbbildung 3.3: RStudio ohne geöffnetes Dokument\n\n\n\nDu solltest nun dein erstes Quarto-Dokument sehen – gratuliere! Die HTML Seite wird in R-Studio rechts im Viewer angezeigt, sie kann aber auch im Webbrowser geöffnet werden. Die Webseite ist noch nicht online (dazu kommen wir später) sondern es ist ein .html-Dokument im gleichen Ordner wie deine Originaldatei. Der Ordner mit gleichem Namen gehört ebenfalls zur Webseite, denn bei Webseiten werden typischerweise Inhalt und Layout getrennt abgespeichert.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Dein erstes Quarto-Dokument</span>"
    ]
  },
  {
    "objectID": "03_erstes_Dokument.html#nächste-schritte",
    "href": "03_erstes_Dokument.html#nächste-schritte",
    "title": "3  Dein erstes Quarto-Dokument",
    "section": "3.5 Nächste Schritte",
    "text": "3.5 Nächste Schritte\nDu kannst jetzt einfach weiter Text schreiben oder neue Überschriften hinzufügen. Hier ein paar Beispiele:\n## Meine Themen\n\nIch unterrichte *gerne* Mathematik.\n\n## Warum ich Quarto nutze\n\nWeil es einfach ist und **schön** aussieht.\n\nIch kann auf [Google](google.com) verlinken oder auf die [PHBern](phbern.ch).\nKlicke wieder auf Render, um das aktualisierte Dokument zu sehen.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Dein erstes Quarto-Dokument</span>"
    ]
  },
  {
    "objectID": "03_erstes_Dokument.html#zusatz-andere-dateiformate-docx-pptx-präsentationen",
    "href": "03_erstes_Dokument.html#zusatz-andere-dateiformate-docx-pptx-präsentationen",
    "title": "3  Dein erstes Quarto-Dokument",
    "section": "3.6 Zusatz: Andere Dateiformate (docx, pptx, Präsentationen)",
    "text": "3.6 Zusatz: Andere Dateiformate (docx, pptx, Präsentationen)\nDu kannst Quarto nicht nur für Webseiten nutzen. Es kann dein Dokument auch als Word-Datei (docx), PowerPoint-Folie (pptx) oder sogar als interaktive Präsentation (reveal.js) ausgeben:\n\n3.6.1 Format ändern\nIm oberen Teil deines Dokuments (dem YAML-Header) steht so etwas wie:\n---\ntitle: \"Mein erstes Quarto-Dokument\"\nauthor: \"Max Muster\"\nformat: html\n---\nWenn du nun statt html z. B. docx einträgst, wird dein Dokument beim Rendern als Word-Datei erstellt:\nformat: docx\nDasselbe geht auch für PowerPoint:\nformat: pptx\nOder für eine schöne interaktive Präsentation mit „reveal.js“:\nformat: revealjs\nHinweis: Für PowerPoint oder Word brauchst du Microsoft Office auf deinem Gerät installiert. Für revealjs brauchst du nur einen Webbrowser (z.B. Chrome oder Firefox).\n\n\n\n\n\n\nVorsicht\n\n\n\nBei jedem Format wird das Standardtemplate (Layout, Formatierung) verwendet. Das kann natürlich später alles geändert werden. Es führt auch dazu, dass revealjs Slides nicht identisch zu Powerpoint Slides aussehen.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Dein erstes Quarto-Dokument</span>"
    ]
  },
  {
    "objectID": "03_erstes_Dokument.html#mehrere-formate-auf-einmal",
    "href": "03_erstes_Dokument.html#mehrere-formate-auf-einmal",
    "title": "3  Dein erstes Quarto-Dokument",
    "section": "3.7 Mehrere Formate auf einmal?",
    "text": "3.7 Mehrere Formate auf einmal?\nJa, sogar das geht – einfach so schreiben:\nformat:\n  html: default\n  docx: default\n  pptx: default\n\n\n\n\n\n\nAbbildung 3.4: Wähle beim Rendern aus welches Dateiformat gerendert werden sollte\n\n\n\nGleichzeitig alle angegeben Formate rendern geht auch, schauen wir uns aber erst an, wenn wir eine ganze Webseite erstellen.\n\n\n\n\n\n\nVorsicht\n\n\n\nDas Dokumentformat pdfgibt es ebenfalls und kann auch gut benutzt werden, hierfür wird jedoch \\(\\LaTeX\\) verwendet. Somit kann ein Meldung kommen, dass noch etwas nachinstalliert werden sollte.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Dein erstes Quarto-Dokument</span>"
    ]
  },
  {
    "objectID": "04_Formatieren.html",
    "href": "04_Formatieren.html",
    "title": "4  Texte gestalten mit Quarto",
    "section": "",
    "text": "4.1 Überschriften\nJetzt, wo du dein erstes Quarto-Dokument erstellt hast, schauen wir uns an, wie du den Text schön und übersichtlich gestalten kannst.\nDie hier gezeigten Methoden funktionieren in allen Dateiformaten. Empfehlung ist htmlund revealjs da beide auf den Websprachen html, css und js basieren und in jedem Webbrowser angezeigt werden können.\nÜberschriften helfen dabei, deinen Text zu strukturieren. Sie funktionieren ganz einfach:\nJe mehr #, desto kleiner die Überschrift.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Texte gestalten mit Quarto</span>"
    ]
  },
  {
    "objectID": "04_Formatieren.html#überschriften",
    "href": "04_Formatieren.html#überschriften",
    "title": "4  Texte gestalten mit Quarto",
    "section": "",
    "text": "# Überschrift 1 (grösste Überschrift)\n## Überschrift 2 (zweitgrösste Überschrift)\n### Überschrift 3 ...",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Texte gestalten mit Quarto</span>"
    ]
  },
  {
    "objectID": "04_Formatieren.html#textformatierungen",
    "href": "04_Formatieren.html#textformatierungen",
    "title": "4  Texte gestalten mit Quarto",
    "section": "4.2 Textformatierungen",
    "text": "4.2 Textformatierungen\nHier ein paar nützliche Dinge, die du direkt im Text verwenden kannst:\n\n\n\nFormat\nSo schreibst du es\nErgebnis\n\n\n\n\nFett\n**dieser Text**\ndieser Text\n\n\nKursiv\n*dieser Text*\ndieser Text\n\n\nCode\n`dieser Text`\ndieser Text\n\n\nLink\n[Text](https://example.com)\nText",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Texte gestalten mit Quarto</span>"
    ]
  },
  {
    "objectID": "04_Formatieren.html#listen",
    "href": "04_Formatieren.html#listen",
    "title": "4  Texte gestalten mit Quarto",
    "section": "4.3 Listen",
    "text": "4.3 Listen\nListen sind super, um Dinge übersichtlich darzustellen.\n\n4.3.1 Ungeordnete Liste:\n- Apfel\n- Banane\n- Orange\noder\n* Aple\n* Banane\n* Orange\nErgibt:\n\nApfel\n\nBanane\n\nOrange\n\nHinweis: Falls du andere Symbole am Anfang nutzen möchtest, geht das übers YAML.\n\n\n4.3.2 Geordnete Liste:\n1. Einschalten\n2. Rendern\n3. Speichern\nErgibt:\n\nEinschalten\n\nRendern\n\nSpeichern\n\nHinweis:\nDie Zahlen vorne sind eigentlich egal, Quarto zählt selbst auf. Folgendes wird also auch funktioneiren:\n1. Einschalten\n1. Rndern\n1. Speichern",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Texte gestalten mit Quarto</span>"
    ]
  },
  {
    "objectID": "04_Formatieren.html#bilder-einfügen",
    "href": "04_Formatieren.html#bilder-einfügen",
    "title": "4  Texte gestalten mit Quarto",
    "section": "4.4 Bilder einfügen",
    "text": "4.4 Bilder einfügen\nBilder lassen sich ganz einfach einfügen, ähnlich wie Links:\n![Beschreibung](bildname.png)\nBeispiel:\n![Logo PHBern](phbern-logo.png)\nGenau wie beim Link, muss in den runden Klammern ein Pfad stehen, hier ein Pfad zum Bild. Die Beispiele oben erwarten, dass das Bild im gleichen Ordner wie die .qmd-Datei liegt.\n\n\n\n\n\n\nTipp\n\n\n\nUnterordner:\n![Logo PHBern](Bilder/phbern-logo.png)\nÜbergeorndneter Ordner\n![Logo PHBern](../phbern-logo.png)\nDirekt aus dem Internet\n![Logo PHBern](https://ttim.phbern.ch/wp-content/uploads/2022/06/phbern_logo_desktop_20220615.svg)\nLetzteres wird live geladen vom Benutzer, das heisst, dass es nur angezeigt werden kann, wenn der Benutzer Internetzugang hat.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Texte gestalten mit Quarto</span>"
    ]
  },
  {
    "objectID": "04_Formatieren.html#callout-boxen",
    "href": "04_Formatieren.html#callout-boxen",
    "title": "4  Texte gestalten mit Quarto",
    "section": "4.5 Callout-Boxen",
    "text": "4.5 Callout-Boxen\nWie findest du die farblichen Kästchen? Auch die kannst du einfach mit etwas Syntax selbst einfügen\n:::{.callout-tip}\n\nMein Text für einen Tipp hier:\n\n:::\nUnd das beste ist, die Boxen sehen auch auf deinen revealjs-Slides gut aus.\nEs gibt einen grossen Guide mit allen möglichen Einstellungen zu Quarto. Falls du mehr Möglichkeiten möchtest, schau da mal rein.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Texte gestalten mit Quarto</span>"
    ]
  },
  {
    "objectID": "05_Tabellen.html",
    "href": "05_Tabellen.html",
    "title": "5  Tabellen, Formeln und interaktive Inhalte",
    "section": "",
    "text": "5.1 Tabellen erstellen\nTabellen lassen sich in Quarto sehr einfach schreiben. Hier ein Beispiel:\nErgebnis:\nDie Leerstellen sind egal, es könnte übrigens auch so aussehen:\nDie Bindestriche geben die relative Länge, wenn in jeder Spalte zwei sind, sind alle Spalten gleich breit.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Tabellen, Formeln und interaktive Inhalte</span>"
    ]
  },
  {
    "objectID": "05_Tabellen.html#tabellen-erstellen",
    "href": "05_Tabellen.html#tabellen-erstellen",
    "title": "5  Tabellen, Formeln und interaktive Inhalte",
    "section": "",
    "text": "| Name       | Fach        | Klasse |\n|------------|-------------|--------|\n| Anna Meyer | Mathematik  | 7A     |\n| Tom Berger | Deutsch     | 8B     |\n\n\n\n\nName\nFach\nKlasse\n\n\n\n\nAnna Meyer\nMathematik\n7A\n\n\nTom Berger\nDeutsch\n8B\n\n\n\n\n| Name| Fach| Klasse |\n|--|--|--|\n| Anna Meyer | Mathematik| 7A|\n| Tom Berger | Deutsch| 8B|\n\n\n5.1.1 Visual Editor\nDas Eintippen einer solchen Tabelle kann lästig sein. Einerseits kann jeder Chatbot (KI) dich beim Schreiprozess unterstützen, denn Markdownkönnen die sehr gut. Andererseits kannst du auch den Visual Editor nutzen.\n\n\n\n\n\n\nAbbildung 5.1: RStudio - Visual Editor\n\n\n\nDer Visual Editor ist näher an typischen Textverarbeitungsprogramm wie z.B. Word. Du kannst über klicken Tabellen oder Bilder einfügen, auch siehst du die meisten Formatierungen (z.B. Überschriften und fett) ähnlich wie sie später angezeigt werden. Falls du Quarto als Lerngelegenheit auffasst, etwas mehr über Computersprachen zu lernen, dann würde ich den Visual Editor vermeiden.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Tabellen, Formeln und interaktive Inhalte</span>"
    ]
  },
  {
    "objectID": "05_Tabellen.html#mathematische-formeln",
    "href": "05_Tabellen.html#mathematische-formeln",
    "title": "5  Tabellen, Formeln und interaktive Inhalte",
    "section": "5.2 Mathematische Formeln",
    "text": "5.2 Mathematische Formeln\nQuarto unterstützt LaTeX für mathematische Formeln. Zwei Varianten sind wichtig:\n\n5.2.1 Formeln im Text\nDie Fläche berechnet sich mit $A = a \\cdot b$.\nErgebnis: Die Fläche berechnet sich mit \\(A = a \\cdot b\\).\n\n\n5.2.2 Formeln als Block\n$$\nE = mc^2\n$$\nErgebnis:\n\\[\nE = mc^2\n\\]",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Tabellen, Formeln und interaktive Inhalte</span>"
    ]
  },
  {
    "objectID": "05_Tabellen.html#referenzieren",
    "href": "05_Tabellen.html#referenzieren",
    "title": "5  Tabellen, Formeln und interaktive Inhalte",
    "section": "5.3 Referenzieren",
    "text": "5.3 Referenzieren\nDir ist vielleicht Aufgefallen, dass die Abbildungen aufgezählt werden, auch das ist bereits in Quarto eingebaut.\n![Bildtitel](Bildquelle){#fig-beliebigerTeil}\nDie {#fig-}hinten sorgen dafür, dass die Abbildung als solche erkannt wird.\nAlternative Schreibweise:\n::: {#fig-beliebigerTeil}\n\n![](bild.png)\n\nBildtitel\n:::\nUm auf die Abbildung zu referenzieren, kannst du mit @fig-beliebigerTeilauf sie verlinken, z.B. mit Abbildung 1.1 (a) .\nTabellen können ebenfalls einfach referenziert werden:\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: My Caption {#tbl-letters}\n\nSee @tbl-letters.\noder alternative Schreibweise\n::: {#tbl-letters}\n\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\nMy Caption\n\n::: \nFür mathematikaffine Personen\ngibt es ebenfalls die aus \\(\\LaTeX\\) üblichen Aufzählungen:\n::: {#def-line}\n## Nullteilerfrei\n\nFrei von Nullteilern.\n:::\n\nDefinition 5.1 (Nullteilerfrei) Frei von Nullteilern.\n\n\n5.3.1 Code einfügen\nWenn du Programmcode zeigen willst, geht das mit drei Backticks (```) und der Angabe der Sprache:\n```r\nx &lt;- 1:5\nmean(x)\n```\nDas wird als R-Code angezeigt und kann, wenn du möchtest, sogar ausgeführt werden. Damit Code ausführt wird, schreibst du die Programmiersprache zwischen {}, z.B. {r}.\n\nx &lt;- 1:5\nmean(x)\n\n[1] 3\n\n\nProgrammieren wirst du vermutlich selten, aber dieser Hinweis mit dem Programmiercode wird noch nützlich sein, wenn wir Mermaid.js anschauen.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Tabellen, Formeln und interaktive Inhalte</span>"
    ]
  },
  {
    "objectID": "06_Webseiten.html",
    "href": "06_Webseiten.html",
    "title": "6  Quarto Webseite organisieren",
    "section": "",
    "text": "6.1 Projektstruktur anlegen\nFür eine kleine Webseite genügt eine überschaubare Struktur:\nDu kannst die Ordnerstruktur händisch anlegen, aber dein Textprogramm, z.B. Rstudio kann es auch für dich anlegen.\nKlicke dafür auf file-&gt; new project -&gt; new directory und wähle einen Ordner an einem passenden Ort auf deinem Festspeicher.\nJetzt hast du alles notwendigen Dateien mit ein paar Voreinstellungen im gewählten Ordner drin.\nWenn du jetzt renderklickst, dann erhältst du im “Viewer”-Tab die Webseite!\nIn deinen Files ist ein neuer Order _site hinzugekommen. Darin enthalten ist deine Webseite. Viele Webseite, sogenannte statische Webseiten, sind nichts weiter als ein Ordner voll mit Textdateien (html-Dateien), welche von deinem Internet-Browser angezeigt werden können. Später kannst du genau diese Webseite mühelos vom Internet aus zugänglich machen.\nDu kannst auch die html-Dateien mit R-Studio öffnen, dann siehst du den Quellcode. Ist interessant, aber hilft uns jetzt nicht.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Quarto Webseite organisieren</span>"
    ]
  },
  {
    "objectID": "06_Webseiten.html#projektstruktur-anlegen",
    "href": "06_Webseiten.html#projektstruktur-anlegen",
    "title": "6  Quarto Webseite organisieren",
    "section": "",
    "text": "mein-webprojekt/\n├─ _quarto.yml\n├─ index.qmd\n├─ about.qmd\n├─ material/\n│  ├─ index.qmd\n│  └─ arbeitsblatt.qmd\n├─ images/\n│  └─ phbern-logo.png\n└─ styles.css\n\nindex.qmd: Startseite\nabout.qmd: Über mich oder Kontakt\nmaterial/: Unterordner für Materialien\nimages/: Grafiken und Logos\nstyles.css: Eigene Gestaltung (optional)\n_quarto.yml: Zentrale Steuerdatei für die ganze Webseite\n\n\n\n\n\n\n\n\n\nAbbildung 6.1: Wähle hier “new website”\n\n\n\n\n\n\n\n\n\nAbbildung 6.2: Die Einstellungen kannst du so lassen\n\n\n\n\n\n\n\n\n\n\nAbbildung 6.3: Wähle rechts unten das Tab “Files”, dann behältst du den Überblick\n\n\n\n\n\n\n\n\n\n\nAbbildung 6.4: Rechts die Webseite mit Menü oben und Hyperlink in blau\n\n\n\n\n\n\n\n\n\n\nAbbildung 6.5: Der neue _site Ordner enthält deine Webseite",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Quarto Webseite organisieren</span>"
    ]
  },
  {
    "objectID": "06_Webseiten.html#einstellungen-vornehmen-_quarto.yml",
    "href": "06_Webseiten.html#einstellungen-vornehmen-_quarto.yml",
    "title": "6  Quarto Webseite organisieren",
    "section": "6.2 Einstellungen vornehmen _quarto.yml",
    "text": "6.2 Einstellungen vornehmen _quarto.yml\nIn Quarto ist alles über Text eingestellt. In einzelnen Dateien hast du oben das Yaml geschrieben. In Projekten, wie z.B. deine Webseite, gibt es eine zentrale Yaml-Datei, die sich automatisch auf alle Quarto-Dokumente auswirkt.\nIn der _quarto.yml sagst du Quarto, dass es sich um eine Webseite handelt und wie Navigation und Design aussehen. Beispiel:\nproject:\n  type: website\n\nwebsite:\n  title: \"Meine Unterrichtswebseite\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Start\n      - href: about.qmd\n        text: Über mich\n      - text: Materialien\n        menu:\n          - href: material/index.qmd\n            text: Übersicht\n          - href: material/arbeitsblatt.qmd\n            text: Arbeitsblatt\n  page-navigation: true   # Vor/Zurück-Navigation am Seitenende\n\nformat:\n  html:\n    theme: cosmo          # Ein helles Bootstrap-Thema\n    toc: true             # Inhaltsverzeichnis rechts\n    number-sections: false\n    css: styles.css       # Optional eigene CSS-Datei\n\n\n\n\n\n\nAbbildung 6.6: Die Yaml Datei in Rstudio\n\n\n\n\n\n\n\n\n\nVorsicht\n\n\n\nBenenne _quarto.yml und index.qmd nicht um. Deine Homepage, also die Startsteite, muss immer index.qmdheissen, sonst erhältst du einen Fehler.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Quarto Webseite organisieren</span>"
    ]
  },
  {
    "objectID": "06_Webseiten.html#seiten-anlegen-und-verlinken",
    "href": "06_Webseiten.html#seiten-anlegen-und-verlinken",
    "title": "6  Quarto Webseite organisieren",
    "section": "6.3 Seiten anlegen und verlinken",
    "text": "6.3 Seiten anlegen und verlinken\nBeispiel für eine Startseite index.qmd:\n---\nformat: html\ntitle: \"Meine_Kurswebseite\"\nsubtitle: intrinsische Motivation für Extrinsiker\nauthor: Richard Conrardy\ndate: today\n---\n\n# Herzlich Willkommen im Kurs\n\nFreut mich, dass du hier bist.\n\n## Thema 1\n\nInformationen über mich findest auf [hier](about.qmd).\n\n## Thema 2\n\n\n\n\n\n\nAbbildung 6.7: Und so sieht die Index-Page aus\n\n\n\nNun ist das Datum noch auf Englisch eingestellt. Da du vermutlich global, also auf der gesamten Webseite, die Sprache auf Deutsch haben möchtest, änderst du die Einstellung in _quarto.yml und fügt an der richtigen Stelle lang: de hinzu. Achte auch auf die genauen Abstände.\nformat:\n  html:\n    lang: de\n    theme:\n      - cosmo\n      - brand\nRender die index.qmd neu und das Datum wird auf Deutsch angezeigt. Magst du das Datumformat nicht, kein Problem, füge noch ein dateformat hinzu:\n    lang: de\n    date-format: \"DD.MM.YYYY\"\nMöchtest du im Dokument index.qmd ein spezifisches Datum angeben, musst du es im Iso-Format angeben:\n---\nformat: html\ntitle: \"Meine_Kurswebseite\"\nsubtitle: intrinsische Motivation für Extrinsiker\nauthor: Richard Conrardy\ndate: 2025-10-31\n---",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Quarto Webseite organisieren</span>"
    ]
  },
  {
    "objectID": "06_Webseiten.html#listings",
    "href": "06_Webseiten.html#listings",
    "title": "6  Quarto Webseite organisieren",
    "section": "6.4 Listings",
    "text": "6.4 Listings\nDu kannst selbstverständlich deine Seiten im Menü anzeigen lassen. Aber vielleicht ist es auch ganz praktisch eine Tabelle zu haben mit deinen Lerngelegenheiten.\nErstelle zuerst einen Ordner mit den Namen “lerngelegenheiten”, erstelle im Ordner mehrere .qmd-Files mit Titel.\nIm Yaml-Header der index.qmd-Datei kannst du nun Folgendes hinzufügen:\n---\ntitle: \"Materialien\"\nlisting:\n  contents: lerngelegenheiten/*.qmd\n  type: table\n---\nNun hast du eine tabellarische Liste mit allen qmd-Dateien im Ordner lerngelegenheiten.\n\n\n\n\n\n\nAbbildung 6.8: Links das Yaml, rechts die Webseite mit Tabelle, unten die Ordnerstruktur",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Quarto Webseite organisieren</span>"
    ]
  },
  {
    "objectID": "06_Webseiten.html#navigation-steuern",
    "href": "06_Webseiten.html#navigation-steuern",
    "title": "6  Quarto Webseite organisieren",
    "section": "6.5 Navigation steuern",
    "text": "6.5 Navigation steuern\nDie Reihenfolge im Menü bestimmst du in _quarto.yml unter website.navbar.left. Alles, was dort steht, erscheint oben. Unterpunkte legst du mit menu: an (siehe Beispiel oben).\nOptional kannst du statt einer Top-Navigation links eine Seitenleiste nutzen:\nwebsite:\n  sidebar:\n    style: \"docked\"\n    search: true\n    contents:\n      - index.qmd\n      - about.qmd\n      - section: \"Lerngelegenheiten\"\n        contents:\n          - lerngelegenheiten/lg1.qmd\n          - lerngelegenheiten/lg2.qmd\nNur eine der beiden Varianten gleichzeitig verwenden (Navbar oder Sidebar), sonst wirkt es unruhig.\n\n\n\n\n\n\nAbbildung 6.9: Yaml mit gerenderter index.qmd Seite",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Quarto Webseite organisieren</span>"
    ]
  },
  {
    "objectID": "06_Webseiten.html#einstellungen-pro-seite",
    "href": "06_Webseiten.html#einstellungen-pro-seite",
    "title": "6  Quarto Webseite organisieren",
    "section": "6.6 Einstellungen pro Seite",
    "text": "6.6 Einstellungen pro Seite\nGlobale Voreinstellungen werden in der _quarto.yml-Datei festgehalten. In einzelnen Dateien kann ich jedoch die Voreinstellungen übersteuern und umändern.\nJede .qmd-Seite kann eigene Optionen im Kopfbereich bekommen, zum Beispiel:\n---\ntitle: \"Arbeitsblatt Prozentrechnung\"\ntoc: true\npage-layout: article\n---\n\nHier steht der Inhalt.\nNeben der offiziellen Quarto-Tutorial-Seite gibt es auch eine (mehrheitlich) komplette Referenzliste, mit allen möglichen Einstellungen.\nHier sieht man nun auch den Unterschied zwischen Textbasierten Programmen und Programmen mit Menüführung. Im Menü sieht man übersichtlich seine Optionen, aber die Optionen müssen andererseits so eingeschränkt werden, dass man sie übersichtlich in einem Menü unterbringt. Bei textbasierten Programmen hat man keine Einschränkung an der Anzahl und am Detaillierungsgrad der Optionen, der Nutzer muss jedoch die Befehle kennen; die häufigsten kennt er auswendig, den Rest schaut er im Handbuch nach.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Quarto Webseite organisieren</span>"
    ]
  },
  {
    "objectID": "06_Webseiten.html#styling",
    "href": "06_Webseiten.html#styling",
    "title": "6  Quarto Webseite organisieren",
    "section": "6.7 Styling",
    "text": "6.7 Styling\nDie Webseite sieht jetzt im gleich aus. Vielleicht möchtest du das Styling anpassen. Auch das Styling wird textbasiert festgehalten, dazu gibt es drei Optionen welche du auch parallel oder komplementär benutzen kannst. Mehrere Lösungen für das gleiche Problem ist nicht immer optimal, wenn du an einem Ort sagst die Schrift soll schwarz sein, am nächsten sie soll blau sein und am dritten, sie soll rot sein, ist unklar was du erhältst. Somit die allgemeine Empfehlung, nutze vorwiegend eine Option.\n\n6.7.1 Brand\nDie einzige Möglichkeit mehrere Ausgabeformate (z.B. html, revealjs und pdf) gleichzeitig zu stylen ist die neuere Entwicklung _brand.yml. Es handelt sich um eine eigene Datei mit einem spezifischen Definitionsschema in der Yaml-Syntax.\nIn dieser Datei definierst du deine Farbpalette und was welche Farbe bekommt:\n\nErstelle eine neue Datei mit dem Namen _brand.yml neben der Datei _quarto.yml im Ordner deiner Webseite.\nSchreib in die Datei z.B. rein:\n\ncolor:\n  palette:\n    black: \"#1A1A1A\"\n    white: \"#F9F9F9\"\n    orange: \"#FF6F20\"\n    pink: \"#FF3D7F\"\n  foreground: black\n  background: white\n  primary: orange\n  danger: pink\n\ntypography:\n  headings:\n    color: primary\n\nlogo: \n  medium: https://upload.wikimedia.org/wikipedia/commons/3/35/Tux.svg\nFalls du die Datei richtig benannt und am richtigen Ort hast, wird sie automatisch auf die Webseite angewandt. Falls du keine einzelne Dateien anders steuern möchtest, kannst du brand: dateiname.yml in der Yaml-Kopfzeile deines Dokuments angeben.\n\n\n\n\n\n\nAbbildung 6.10: _brand.yml mit neu gerenderter index.qmd Datei\n\n\n\nDie Einstellung wird nun für einige Ausgabeformate funktionieren:\n\n\n\n\n\n\nAbbildung 6.11: Brand mit revealjs-Slides\n\n\n\n\n\n\n\n\n\nAbbildung 6.12: Brand mit revealjs-Slides\n\n\n\nStand 2025 werden noch keine anderen Ausgabeformate wie docx oder pptx unterstützt.\nHinweis: Damit es nicht zu Überschneidungen kommt, wird die _brand.yml-Datei für die weiteren Ausführungen gelöscht.\n\n\n6.7.2 Themes\nEs gibt auch vorgefertigte “Themes”, z.B. kannst du eine Präsentationen im Dark-Mode (weisse Schrift auf schwarzem Hintergrund) erstellen mit\n---\ntitle: \"Presentation\"\nformat:\n  html:\n    theme: darkly\n---\n\n\n\n\n\n\nAbbildung 6.13: Theme Darkly auf der Index-Seite\n\n\n\nEs gibt diverse Themes, diese sind je nach Theme gültig für ein oder mehrere Formate. Themes für Revealjs-Slides findest du in der Dokumentation. Quarto ermöglicht beliebige Erweiterungen zu schreiben, so gibt es auch Erweiterungen mit weiteren Themes, wie z.B. das R-Ladies-Theme.\n\n\n6.7.3 Quarto.yml\nDu kannst auch den Style direkt in der _quarto.yml-Datei einstellen. Alle möglichen Optionen findest du in der offiziellen Referenzliste.\nErgänze deine _quarto.yml-Datei um folgende Einträge:\nwebsite:\n  sidebar:\n    background: blue\nformat:\n  html:\n    backgroundcolor: red\n\n\n\n\n\n\nAbbildung 6.14: Styling über quarto.yml\n\n\n\n\n\n6.7.4 CSS\nCascading Style Sheets (CSS-Dateien) werden in html genutzt um Webseiten zu stylen. Es handelt sich um eine eigene Computersprache unabhängig von Quarto. Hier werden ein paar Beispiele gezeigt; KI-Chatbots können dir auch gut weiterhelfen die korrekte Syntax zu schreiben.\nQuarto hat für deine Webseite bereits eine leere styles.css-Datei angelegt und sie für html auch in _quarto.yml explizit angegeben mit css: styles.css. Öffne letztere und schreib:\nh1 { font-size: 4.0rem; }\nh2 { font-size: 2.0rem; }\n\nh1, h2, h3, h4, h5, h6 {\n  color: #800020 ;\n}\n\n\n\n\n\n\nAbbildung 6.15: Überschriften in Bordeau-Rot und grösser",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Quarto Webseite organisieren</span>"
    ]
  },
  {
    "objectID": "08_Publizieren.html",
    "href": "08_Publizieren.html",
    "title": "7  Publizieren: Quarto Pub, GitHub Pages und ILIAS",
    "section": "",
    "text": "7.1 Überblick: Welche Option passt?\nIn diesem Kapitel siehst du zwei Wege, um deine Quarto-Webseite für Studierende und Kolleginnen und Kollegen zugänglich zu machen. Quarto-Pub ist am einfachsten und in 5 Minuten erledigt, die Daten landen bei der Non-Profit Organisation hinter Quarto. Eine Speicherbegrenzung ist nicht bekannt, aber es wäre schön deren Wohlwollen nicht zu missbrauchen und auch privat etwas zu spenden. Auch das Einbinden in Ilias als HTML funktioniert, aber bei jeder Änderung muss die Webseite manuell neu hochgeladen werden, dafür ist deine Webseite aber lediglich zugänglich für Personen welche in Ilias eingeloggt sind.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Publizieren: Quarto Pub, GitHub Pages und ILIAS</span>"
    ]
  },
  {
    "objectID": "08_Publizieren.html#überblick-welche-option-passt",
    "href": "08_Publizieren.html#überblick-welche-option-passt",
    "title": "7  Publizieren: Quarto Pub, GitHub Pages und ILIAS",
    "section": "",
    "text": "Service\nVorteile\nAufwand beim Aktualisieren\n\n\n\n\nQuarto Pub\nEinfach zu bedienen, schnell\nsehr gering\n\n\nGitHub Pages\nVersionskontrolle, komplizierter zu bedienen\nsehr gering\n\n\nILIAS (HTML-Objekt)\nIntern in ILIAS verfügbar\nhoch",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Publizieren: Quarto Pub, GitHub Pages und ILIAS</span>"
    ]
  },
  {
    "objectID": "08_Publizieren.html#terminal",
    "href": "08_Publizieren.html#terminal",
    "title": "7  Publizieren: Quarto Pub, GitHub Pages und ILIAS",
    "section": "7.2 Terminal",
    "text": "7.2 Terminal\nUnten in RStudio hat es ein Terminal, eine Befehlszeile. Bitte nichts verwechseln mit der Console. Das Terminal gibt dem Betriebssystem Befehle, die Console gibt der Programmiersprache R Befehle.\nGib im Termin den Befehl quarto --version ein. Es sollte dir deine installierte Quartoversion ausgeben.\n\n\n\n\n\n\nAbbildung 7.1: Abfrage der Quarto-Version übers Terminal",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Publizieren: Quarto Pub, GitHub Pages und ILIAS</span>"
    ]
  },
  {
    "objectID": "08_Publizieren.html#quarto-pub",
    "href": "08_Publizieren.html#quarto-pub",
    "title": "7  Publizieren: Quarto Pub, GitHub Pages und ILIAS",
    "section": "7.3 Quarto Pub",
    "text": "7.3 Quarto Pub\nErstelle auf https://quartopub.com einen Account.\nSchreib im Terminal:\nquarto publish quarto-pub\n\n\n\n\n\n\nAbbildung 7.2: Publishen übers Terminal\n\n\n\nDu erhältst einen Hinweis im Terminal, dass du in deinem Standardbrowser eingeloggt sein musst. Falls du den Account oben mit deinem Standardbrowser (Edge, Safari, Chrome, Firefox, …) erstellt hast, bist du bereits eingeloggt. Du bist aufgefordert im Terminal zu bestätigen, schreibe Y und drücke Enter.\nBestätige jetzt noch im Browser, dass Quarto auf deinen Account zugreifen darf.\n\n\n\n\n\n\nAbbildung 7.3: Im Browser muss die Verbindung akzeptiert werden\n\n\n\nDann wirst du gefragt unter welchem Namen die Webseite publiziert werden soll, dieser name wird Teil der URL (Webadresse) später sein.\nSobald ein kompletter Rendervorgang abgeschlossen ist, wird die gesamte Webseite nun angezeigt auf: https://deinusername.quarto.pub/webseitennamen/. Wenn du etwas umändern möchtest, kannst du quarto publish im Terminal eingeben und es wieder auf Quartopub publizieren.\n\n\n\n\n\n\nAbbildung 7.4: Beim Hochladen werden alle Seiten neu gerendert und der Fortschritt angezeigt",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Publizieren: Quarto Pub, GitHub Pages und ILIAS</span>"
    ]
  },
  {
    "objectID": "08_Publizieren.html#ilias",
    "href": "08_Publizieren.html#ilias",
    "title": "7  Publizieren: Quarto Pub, GitHub Pages und ILIAS",
    "section": "7.4 Ilias",
    "text": "7.4 Ilias\nDu kannst die Webseite auch auf Ilias als Lernmodul HTML hochladen. Die Webseite ist dann ausschliesslich für eingeloggte User einsehbar.\nStelle dazu sicher, dass die gesamte Webseite gerendert ist indem du im Terminal quarto render eingibst, dies wird jede Quartodatei auf der Webseite neu rendern.\nNun kannst du in deinem üblichen Fileexplorer (Finder für MacOS-Personen) den Ordner _site ausfindig machen und ihn als .zip-Datei komprimieren.\nGeh nun auf Ilias und erstelle ein Objekt Lernmodul HTML.\nLade die Zip-Datei des Site Ordners hoch und entzippe den Ordner.\n\n\n\n\n\n\nAbbildung 7.5: Der Ordner kann über das Ausklappmenü entzippt werden.\n\n\n\nLeg die index.html Datei als Startdatei fest.\n\n\n\n\n\n\nAbbildung 7.6: Die Startdatei wird über das Ausklappmenü bestimmt.\n\n\n\nNun kannst du das Iliasobjekt öffnen deine Webseite anschauen. Falls du etwas an der Seite ändern möchtest, löscht du das komplette Objekt oder alle Dateien darin und startest den Prozess oben neu. Das ist leider nicht praktisch, falls du häufig Informationen ändern möchtest.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Publizieren: Quarto Pub, GitHub Pages und ILIAS</span>"
    ]
  },
  {
    "objectID": "08_Publizieren.html#github",
    "href": "08_Publizieren.html#github",
    "title": "7  Publizieren: Quarto Pub, GitHub Pages und ILIAS",
    "section": "7.5 Github",
    "text": "7.5 Github\nMan kann die Webseite auch auf Github hosten, der Prozess ist nur geringfügig komplizierter als Quartopub und lohnt sich, wenn man eh an Git (Versionsverwaltungsprogramm) interessiert ist.\nFür ein Tutorial verweise ich auf den offizielle Quarto Guide.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Publizieren: Quarto Pub, GitHub Pages und ILIAS</span>"
    ]
  },
  {
    "objectID": "09_Zitieren.html",
    "href": "09_Zitieren.html",
    "title": "8  Lernziele",
    "section": "",
    "text": "9 Zotero\nZotero ist ein Literaturverwaltungsprogramm. PHBern Mitarbeiter erhalten (Stand 2025) uneingeschränken Cloudspeicher. Zotero hat Plugins für Textverarbeitungsprogramme. Quarto braucht für sein Literaturverzeichnis alle Quellen in einem BibTex-Format und Quarto (sowie vermutlich alle Literaturverwaltungsprogramme) kann dies generieren, es kann es sogar automatisch neu generieren, falls Literatur hinzukommt.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lernziele</span>"
    ]
  },
  {
    "objectID": "09_Zitieren.html#citation-key",
    "href": "09_Zitieren.html#citation-key",
    "title": "8  Lernziele",
    "section": "9.1 Citation-Key",
    "text": "9.1 Citation-Key\nIn Quarto wirst du später die Quellen mit einem Citation Key zitieren. Du schreibst z.B. im Text @talbert2023oder @talbert_analyzing_202. Wie dieser Key aussieht, entscheidest du. Kürzere Keys kann man schneller schreiben, aber manche Autoren haben im gleichen Jahr mehrere Papers rausgebracht, und dann muss ich nachschauen welches talbert2023_1 und welches tablert2023_2 ist.\nInstalliere das Zotero-Plugin (übers Menü) Better BibTex for Zotero.\nStelle die Citation Keys in den Settings (Einstellungen) von Zotero, unter BetterBibtex ein.\n\n\n\n\n\n\nAbbildung 9.1: Einstellungen von Citation Keys in Zotero\n\n\n\nEine komplette Erklärung zu allen möglichen Citation Keys findest du auf jeweiligen Wiki.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lernziele</span>"
    ]
  },
  {
    "objectID": "09_Zitieren.html#export",
    "href": "09_Zitieren.html#export",
    "title": "8  Lernziele",
    "section": "9.2 Export",
    "text": "9.2 Export\nExportiere nun deine gesamte Library über Zotero, achte dabei darauf, dass du “keep updated” aktiviert hast. Speicher sie in den gleichen Ordner wie deine Webseite ab.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lernziele</span>"
    ]
  },
  {
    "objectID": "09_Zitieren.html#schritt-a-automatischen-export-aus-zotero-einrichten",
    "href": "09_Zitieren.html#schritt-a-automatischen-export-aus-zotero-einrichten",
    "title": "8  Lernziele",
    "section": "9.3 Schritt A: Automatischen Export aus Zotero einrichten",
    "text": "9.3 Schritt A: Automatischen Export aus Zotero einrichten\nEs gibt zwei einfache Wege. Nutze den, der dir besser liegt.\n\n9.3.1 Weg 1: Export direkt auf einer Sammlung\n\nÖffne Zotero.\n\nRechtsklick auf die gewünschte Sammlung (z. B. „Masterarbeit“).\n\n„Export Library…“ wählen.\n\nFormat: Better BibTeX auswählen.\n\nHäkchen setzen: Keep updated (automatisch aktuell halten).\n\nSpeicherort wählen: in deinem Quarto-Projekt, z. B. refs/references.bib.\n\nOK. Fertig.\n\nJede Änderung in der Sammlung landet nun automatisch in references.bib.\n\n\n9.3.2 Weg 2: Zentral in den Better‑BibTeX‑Einstellungen\n\nZotero → Einstellungen → Better BibTeX.\n\nReiter Automatic export.\n\n„+“ klicken, die Sammlung wählen und als Zielpfad refs/references.bib angeben.\n\nOn change aktivieren (bei Änderungen automatisch exportieren).\n\n\nTipp: Lege im Projekt einen Ordner refs/ an und speichere alle Literatur-Dateien (z. B. references.bib, style.csl) dort.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lernziele</span>"
    ]
  },
  {
    "objectID": "09_Zitieren.html#schritt-b-quarto-für-literatur-konfigurieren",
    "href": "09_Zitieren.html#schritt-b-quarto-für-literatur-konfigurieren",
    "title": "8  Lernziele",
    "section": "9.4 Schritt B: Quarto für Literatur konfigurieren",
    "text": "9.4 Schritt B: Quarto für Literatur konfigurieren\nDu kannst die Literatur global in _quarto.yml oder pro Seite/Document im YAML‑Kopf einstellen.\n\n9.4.1 Global (für Website oder Book empfohlen)\nproject:\n  type: website\n\nformat:\n  html:\n    toc: true\n\nbibliography: refs/references.bib\ncsl: refs/apa.csl        # optional: Zitationsstil (z. B. APA 7)\nlink-citations: true     # verlinkt Zitate mit dem Literaturverzeichnis\n\n\n9.4.2 Pro Seite (im Kopf der .qmd-Datei)\n---\ntitle: \"Methode\"\nbibliography: refs/references.bib\ncsl: refs/apa.csl\nlink-citations: true\n---\nWenn du keinen csl angibst, nutzt Quarto einen Standardstil. Mit einer .csl-Datei (z. B. apa.csl, chicago-author-date.csl) bestimmst du den genauen Zitationsstil. Lege die Datei in refs/ ab.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lernziele</span>"
    ]
  },
  {
    "objectID": "09_Zitieren.html#schritt-c-zitieren-im-text",
    "href": "09_Zitieren.html#schritt-c-zitieren-im-text",
    "title": "8  Lernziele",
    "section": "9.5 Schritt C: Zitieren im Text",
    "text": "9.5 Schritt C: Zitieren im Text\nVerwende die Zitier-Keys aus Zotero (Better BibTeX erzeugt sie automatisch, z. B. müller2021lernen).\nGrundformen:\nNachweis im Fließtext: @mueller2021lernen zeigt, dass …\n\nKlammernachweis: … wie mehrfach gezeigt wurde [@mueller2021lernen].\n\nMehrere Quellen: [@mueller2021lernen; @meier2020; @smith2019]\n\nSeitenzahlen: [@mueller2021lernen, S. 23–25]  # „p.“/„S.“ ist nur Text\n\nPräfix/Suffix: Vgl. @mueller2021lernen, siehe auch [@smith2019, Kap. 3].\nBeim Rendern erzeugt Quarto die korrekten Zitate und am Dokumentende automatisch das Literaturverzeichnis.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lernziele</span>"
    ]
  },
  {
    "objectID": "09_Zitieren.html#option-literaturverzeichnis-sortieren-und-steuern",
    "href": "09_Zitieren.html#option-literaturverzeichnis-sortieren-und-steuern",
    "title": "8  Lernziele",
    "section": "9.6 Option: Literaturverzeichnis sortieren und steuern",
    "text": "9.6 Option: Literaturverzeichnis sortieren und steuern\n\nDie Sortierung und Formatierung übernimmt der CSL‑Stil (Datei *.csl).\n\nFalls du Quellen im Verzeichnis aufführen, aber nicht zitieren willst, nutze nocite im YAML‑Kopf:\n\n---\nnocite: |\n  @mueller2021lernen, @smith2019\n---",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lernziele</span>"
    ]
  },
  {
    "objectID": "09_Zitieren.html#arbeitsweise-in-der-praxis",
    "href": "09_Zitieren.html#arbeitsweise-in-der-praxis",
    "title": "8  Lernziele",
    "section": "9.7 Arbeitsweise in der Praxis",
    "text": "9.7 Arbeitsweise in der Praxis\n\nQuellen in Zotero sammeln (PDFs, DOIs, Webseiten).\n\nSicherstellen, dass der Auto‑Export aktiv ist (Ziel: refs/references.bib).\n\nIn Quarto bibliography (und optional csl) setzen.\n\nMit (key?) im Text zitieren.\n\nRendern → Zitate und Literaturverzeichnis erscheinen automatisch.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lernziele</span>"
    ]
  },
  {
    "objectID": "09_Zitieren.html#typische-probleme-und-lösungen",
    "href": "09_Zitieren.html#typische-probleme-und-lösungen",
    "title": "8  Lernziele",
    "section": "9.8 Typische Probleme und Lösungen",
    "text": "9.8 Typische Probleme und Lösungen\n\n„Missing citation“ / Key wird nicht gefunden\n\nStimmt der Pfad zu refs/references.bib?\n\nLiegt die .bib wirklich im Projekt und heißt so wie im YAML?\n\nWurde Zotero gerade aktualisiert (Auto‑Export lief schon durch)? Notfalls in Zotero „Refresh“ bzw. einmal manuell exportieren.\n\nFalscher Zitierstil\n\nCSL‑Datei prüfen (liegt sie in refs/?), Pfad in _quarto.yml korrekt?\n\nNach Änderung an csl neu rendern.\n\nUmlaute/Zeichensatz\n\nIn Zotero Datensätze sauber pflegen (Autoren, Titel).\n\nBetter BibTeX sorgt normalerweise für korrekte Unicode‑Ausgabe.\n\nUnklare Zitier-Keys\n\nIn Zotero (BBT) kannst du den Key pinnen: Rechtsklick auf Eintrag → Better BibTeX → Pin Citation Key (ändert sich dann nicht mehr).",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lernziele</span>"
    ]
  },
  {
    "objectID": "09_Zitieren.html#beispiel-miniprojekt-struktur",
    "href": "09_Zitieren.html#beispiel-miniprojekt-struktur",
    "title": "8  Lernziele",
    "section": "9.9 Beispiel-Miniprojekt (Struktur)",
    "text": "9.9 Beispiel-Miniprojekt (Struktur)\nmein-projekt/\n├─ _quarto.yml\n├─ index.qmd\n├─ text.qmd\n└─ refs/\n   ├─ references.bib\n   └─ apa.csl\nIn index.qmd zitierst du z. B. so:\n---\ntitle: \"Beispiel\"\nbibliography: refs/references.bib\ncsl: refs/apa.csl\nlink-citations: true\n---\n\nEin klassisches Ergebnis ist @smith2019. Für Details siehe [@mueller2021lernen, S. 45].",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lernziele</span>"
    ]
  },
  {
    "objectID": "09_Zitieren.html#zusammenfassung",
    "href": "09_Zitieren.html#zusammenfassung",
    "title": "8  Lernziele",
    "section": "9.10 Zusammenfassung",
    "text": "9.10 Zusammenfassung\n\nRichte in Zotero (mit Better BibTeX) einen Auto‑Export deiner Sammlung nach refs/references.bib ein.\n\nVerweise in Quarto per bibliography: (und optional csl:) auf diese Dateien.\n\nZitiere mit (key?) – Quarto erzeugt Zitate und Literaturverzeichnis automatisch.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lernziele</span>"
    ]
  },
  {
    "objectID": "10_Divs.html",
    "href": "10_Divs.html",
    "title": "9  Callouts, Figures und weitere :::- Elemente",
    "section": "",
    "text": "9.1 Grundprinzip: Divs mit ::: öffnen und schliessen\nIn diesem Kapitel lernst du die wichtigsten „Baukasten“-Elemente mit ::: kennen: Callouts (Hinweisboxen), Figures (Bilder mit Beschriftung), Columns (Inhalte nebeneinander), Tabsets (Reiter) und eigene Divs. Du brauchst dafür keine HTML-Kenntnisse.\nViele erweiterte Elemente beginnen mit ::: und enden mit :::. Die Art des Elements steuerst du mit einer Klasse in geschweiften Klammern:\nQuarto erkennt an der Klasse (z. B. .callout-note), was daraus werden soll.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Callouts, Figures und weitere `:::-` Elemente</span>"
    ]
  },
  {
    "objectID": "10_Divs.html#grundprinzip-divs-mit-öffnen-und-schliessen",
    "href": "10_Divs.html#grundprinzip-divs-mit-öffnen-und-schliessen",
    "title": "9  Callouts, Figures und weitere :::- Elemente",
    "section": "",
    "text": "::: {.meine-klasse}\nInhalt hier …\n:::",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Callouts, Figures und weitere `:::-` Elemente</span>"
    ]
  },
  {
    "objectID": "10_Divs.html#callouts-hinweisboxen",
    "href": "10_Divs.html#callouts-hinweisboxen",
    "title": "9  Callouts, Figures und weitere :::- Elemente",
    "section": "9.2 Callouts (Hinweisboxen)",
    "text": "9.2 Callouts (Hinweisboxen)\nCallouts eignen sich für Tipps, Warnungen oder Beispiele. Häufige Varianten sind: note, tip, warning, important, caution.\n::: {.callout-note}\n### Hinweis\nSo fügst du eine kurze Erklärung ein.\n:::\n\n::: {.callout-tip}\n### Tipp\nDas ist besonders praktisch beim Erklären von Arbeitsschritten.\n:::\n\n::: {.callout-warning}\n### Achtung\nHier bitte genau lesen, sonst klappt es nicht.\n:::\nDu kannst Überschriften weglassen oder kürzer schreiben – wichtig ist die Klasse .callout-….\n📸 Screenshot: Drei Callouts nebeneinander/untereinander",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Callouts, Figures und weitere `:::-` Elemente</span>"
    ]
  },
  {
    "objectID": "10_Divs.html#figures-bilder-mit-bildunterschrift-grösse-ausrichtung",
    "href": "10_Divs.html#figures-bilder-mit-bildunterschrift-grösse-ausrichtung",
    "title": "9  Callouts, Figures und weitere :::- Elemente",
    "section": "9.3 Figures (Bilder mit Bildunterschrift, Grösse, Ausrichtung)",
    "text": "9.3 Figures (Bilder mit Bildunterschrift, Grösse, Ausrichtung)\nEs gibt zwei bequeme Wege. Wähle einen und bleibe dabei konsistent.\n\n9.3.1 Weg 1: Markdown-Bild mit Bildunterschrift und Attributen\n![Bildunterschrift: Logo PHBern](images/phbern-logo.png){fig-align=\"center\" width=\"50%\"}\n\nfig-align=\"center\" zentriert das Bild.\n\nwidth=\"50%\" skaliert die Breite relativ zur Seite.\n\n\n\n9.3.2 Weg 2: Div mit figure-Rolle\n\n\n\n\n\n\nLogo PHBern\n\n\n\n\nAbbildung 9.1: Logo der PHBern\n\n\n\n::: {#fig-logo phbern .figure}\n![Logo PHBern](screenshots/gui_projekt.png){width=\"45%\"}\n\n*Logo der PHBern*\n:::\n\nDie letzte Zeile ist die Bildunterschrift (kursiv).\n\nMit einer ID wie {#fig-logo} kannst du verweisen: siehe Abbildung 9.1.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Callouts, Figures und weitere `:::-` Elemente</span>"
    ]
  },
  {
    "objectID": "10_Divs.html#columns-inhalte-nebeneinander",
    "href": "10_Divs.html#columns-inhalte-nebeneinander",
    "title": "9  Callouts, Figures und weitere :::- Elemente",
    "section": "9.4 Columns (Inhalte nebeneinander)",
    "text": "9.4 Columns (Inhalte nebeneinander)\nMit Columns kannst du Text und Bild oder zwei Texte nebeneinander darstellen.\n::: {.columns}\n::: {.column width=\"60%\"}\n**Text links:** Hier steht der Hauptinhalt. Du kannst Überschriften, Listen und Bilder verwenden.\n:::\n::: {.column width=\"40%\"}\n**Rechts:** Ein Bild oder eine Liste.\n![Logo](screenshots/gui_projekt.png){width=\"80%\"}\n:::\n:::\n\nDie Summe der Breiten sollte ungefähr 100 % ergeben.\n\nOhne width teilt Quarto den Platz automatisch.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Callouts, Figures und weitere `:::-` Elemente</span>"
    ]
  },
  {
    "objectID": "10_Divs.html#tabsets-reiter",
    "href": "10_Divs.html#tabsets-reiter",
    "title": "9  Callouts, Figures und weitere :::- Elemente",
    "section": "9.5 Tabsets (Reiter)",
    "text": "9.5 Tabsets (Reiter)\nTabsets sind nützlich, wenn du Varianten oder Beispiele trennen willst (z. B. zwei Lösungswege).\n::: {.panel-tabset}\n## Variante A\nKurze Erklärung für die erste Variante.\n\n## Variante B\nAlternative Darstellung mit anderem Beispiel.\n\n## Häufige Fragen\nAntworten zu typischen Rückfragen.\n:::\n\nJede Überschrift der Ebene 2 (##) wird zu einem Tab.\n\nDu kannst innerhalb der Tabs ganz normalen Markdown verwenden.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Callouts, Figures und weitere `:::-` Elemente</span>"
    ]
  },
  {
    "objectID": "10_Divs.html#eigene-divs-für-gestaltung-oder-logik",
    "href": "10_Divs.html#eigene-divs-für-gestaltung-oder-logik",
    "title": "9  Callouts, Figures und weitere :::- Elemente",
    "section": "9.6 Eigene Divs für Gestaltung oder Logik",
    "text": "9.6 Eigene Divs für Gestaltung oder Logik\nWenn du später mit CSS arbeitest oder Abschnitte gezielt ansprechen willst, kannst du eigene Klassen vergeben:\n::: {.lernziel}\n**Lernziele**\n- Ich kann Callouts einsetzen.\n- Ich kann Bilder mit Bildunterschriften zentrieren.\n:::\nSpäter könntest du .lernziel in styles.css gestalten (z. B. Rahmen, Hintergrund).",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Callouts, Figures und weitere `:::-` Elemente</span>"
    ]
  },
  {
    "objectID": "10_Divs.html#kombinationen",
    "href": "10_Divs.html#kombinationen",
    "title": "9  Callouts, Figures und weitere :::- Elemente",
    "section": "9.7 Kombinationen",
    "text": "9.7 Kombinationen\nElemente lassen sich kombinieren – zum Beispiel ein Callout mit Columns:\n::: {.callout-note}\n### Beispiel mit zwei Spalten\n\n::: {.columns}\n::: {.column}\n- Punkt A\n- Punkt B\n:::\n::: {.column}\n![Skizze](screenshots/gui_projekt.png){width=\"90%\"}\n:::\n:::\n:::\nAchte beim Verschachteln auf die Reihenfolge und schließe jedes :::.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Callouts, Figures und weitere `:::-` Elemente</span>"
    ]
  },
  {
    "objectID": "10_Divs.html#häufige-fehler-und-lösungen",
    "href": "10_Divs.html#häufige-fehler-und-lösungen",
    "title": "9  Callouts, Figures und weitere :::- Elemente",
    "section": "9.8 Häufige Fehler und Lösungen",
    "text": "9.8 Häufige Fehler und Lösungen\n\n„Unerwartetes Ende“ oder komisches Layout: Meist fehlt ein schließendes :::. Zähle die Blöcke und schließe sie von innen nach außen.\n\nKlasse wirkt nicht: Stimmt die Schreibweise? (.callout-tip, .panel-tabset, .columns, .column)\n\nBilder zu groß/klein: Mit width=\"…\" anpassen (z. B. width=\"60%\").\n\nVerweise auf Figures funktionieren nicht: Verwende eine ID (z. B. {#fig-logo}) und verweise mit @fig-logo.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Callouts, Figures und weitere `:::-` Elemente</span>"
    ]
  },
  {
    "objectID": "10_Divs.html#mini-vorlage-zum-kopieren",
    "href": "10_Divs.html#mini-vorlage-zum-kopieren",
    "title": "9  Callouts, Figures und weitere :::- Elemente",
    "section": "9.9 Mini-Vorlage zum Kopieren",
    "text": "9.9 Mini-Vorlage zum Kopieren\n# Titel\n\nEinführungstext …\n\n::: {.callout-tip}\n### Tipp\nKurzer Hinweis für die Studierenden.\n:::\n\n## Beispiel mit Bild\n\n![Beispielbild](screenshots/gui_positron_inception.png){fig-align=\"center\" width=\"60%\"}\n\n## Zwei Spalten\n\n::: {.columns}\n::: {.column width=\"55%\"}\nText hier …\n:::\n::: {.column width=\"45%\"}\n![Grafik](screenshots/gui_positron_inception.png){width=\"90%\"}\n:::\n:::\n\n## Varianten im Tabset\n\n::: {.panel-tabset}\n### Variante 1\nErklärung …\n\n### Variante 2\nAlternative …\n:::",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Callouts, Figures und weitere `:::-` Elemente</span>"
    ]
  },
  {
    "objectID": "10_Divs.html#zusammenfassung",
    "href": "10_Divs.html#zusammenfassung",
    "title": "9  Callouts, Figures und weitere :::- Elemente",
    "section": "9.10 Zusammenfassung",
    "text": "9.10 Zusammenfassung\n\n::: eröffnet/endet einen Div-Block – die Klasse in {…} steuert die Art.\n\nCallouts für Hinweise, Figures für Bilder mit Beschriftungen, Columns für zwei Spalten, Tabsets für Reiter.\n\nSaubere Verschachtelung und korrekte Klassen sind entscheidend.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Callouts, Figures und weitere `:::-` Elemente</span>"
    ]
  },
  {
    "objectID": "11_Mermaid.html",
    "href": "11_Mermaid.html",
    "title": "10  Diagramme mit Mermaid.js in Quarto",
    "section": "",
    "text": "10.1 Grundidee\nQuarto unterstützt Mermaid.js – eine einfache Sprache, um Diagramme direkt im Text zu beschreiben. Beim Rendern wird daraus automatisch eine saubere Grafik. Das ist praktisch für Unterricht, Forschung und Präsentationen, ohne externe Programme.\nDu schreibst einen Codeblock mit der Sprache mermaid:\nBeim Rendern entsteht ein Flussdiagramm.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Diagramme mit Mermaid.js in Quarto</span>"
    ]
  },
  {
    "objectID": "11_Mermaid.html#grundidee",
    "href": "11_Mermaid.html#grundidee",
    "title": "10  Diagramme mit Mermaid.js in Quarto",
    "section": "",
    "text": "```mermaid\ngraph TD\n    A[Start] --&gt; B[Unterrichtsphase]\n    B --&gt; C{Frage gestellt?}\n    C --&gt;|Ja| D[Austausch in Gruppen]\n    C --&gt;|Nein| E[Input durch Lehrperson]\n    D --&gt; F[Zusammenfassung]\n    E --&gt; F[Zusammenfassung]\n```",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Diagramme mit Mermaid.js in Quarto</span>"
    ]
  },
  {
    "objectID": "11_Mermaid.html#beispiele-für-die-lehre",
    "href": "11_Mermaid.html#beispiele-für-die-lehre",
    "title": "10  Diagramme mit Mermaid.js in Quarto",
    "section": "10.2 Beispiele für die Lehre",
    "text": "10.2 Beispiele für die Lehre\n\n10.2.1 1. Unterrichtsablauf darstellen (Flowchart)\n\n\n\n\n\ngraph TD\n    A[Einführung] --&gt; B[Gruppenarbeit]\n    B --&gt; C[Präsentation]\n    C --&gt; D[Reflexion]\n\n\n\n\n\n\nSo kannst du den Ablauf einer Lektion oder eines Moduls skizzieren.\n\n\n10.2.2 2. Entscheidungsdiagramm\n\n\n\n\n\ngraph LR\n    A[Problem] --&gt; B{Kenntnisse vorhanden?}\n    B --&gt;|Ja| C[Selbstständig lösen]\n    B --&gt;|Nein| D[Unterstützung durch LP]\n\n\n\n\n\n\nIdeal, um didaktische Entscheidungswege oder Lernstrategien zu visualisieren.\n\n\n10.2.3 3. Organigramm oder Rollen im Projekt\n\n\n\n\n\ngraph TB\n    Leitung[Projektleitung] --&gt; Doz1[Dozent:in A]\n    Leitung --&gt; Doz2[Dozent:in B]\n    Doz1 --&gt; Stud1[Studierende Gruppe 1]\n    Doz2 --&gt; Stud2[Studierende Gruppe 2]\n\n\n\n\n\n\nGut für Kursorganisation oder Projekte.\n\n\n10.2.4 4. Zeitachse (Gantt-Diagramm)\nMermaid kann auch Gantt-Diagramme – für Semesterplanungen oder Projektphasen.\n\n\n\n\n\ngantt\n    dateFormat  YYYY-MM-DD\n    title Semesterplan\n    section Modul A\n    Einführung       :a1, 2025-09-15, 7d\n    Übungen          :after a1, 14d\n    Leistungsnachweis:2025-10-15, 7d\n    section Modul B\n    Start            :2025-11-01, 14d\n    Projektarbeit    :2025-11-15, 21d\n\n\n\n\n\n\n\n\n10.2.5 5. Konzeptkarten (mindmap-ähnlich)\nMermaid unterstützt einfache Hierarchien mit graph:\n\n\n\n\n\ngraph TD\n    Lernen --&gt; Motivation\n    Lernen --&gt; Strategien\n    Motivation --&gt; Intrinsisch\n    Motivation --&gt; Extrinsisch\n    Strategien --&gt; Wiederholen\n    Strategien --&gt; Verstehen\n\n\n\n\n\n\nDas ist nützlich für Begriffsnetze oder didaktische Modelle.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Diagramme mit Mermaid.js in Quarto</span>"
    ]
  },
  {
    "objectID": "11_Mermaid.html#tipps-für-die-praxis",
    "href": "11_Mermaid.html#tipps-für-die-praxis",
    "title": "10  Diagramme mit Mermaid.js in Quarto",
    "section": "10.3 Tipps für die Praxis",
    "text": "10.3 Tipps für die Praxis\n\nJeder Codeblock beginnt mit ```{mermaid} und endet mit  ```\n\nNutze eckige Klammern [Text] für Kästen, geschweifte {Frage?} für Entscheidungsdiamanten.\n\ngraph TD = Top → Down (oben nach unten), graph LR = Left → Right (links nach rechts).\n\nBei Gantt-Diagrammen: Datumsformat YYYY-MM-DD.\n\nKürzere Texte in Kästen halten die Diagramme übersichtlich.\n\nFür komplexere Strukturen ist es oft besser, mehrere kleine Diagramme statt ein sehr großes zu verwenden.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Diagramme mit Mermaid.js in Quarto</span>"
    ]
  },
  {
    "objectID": "11_Mermaid.html#häufige-fehler",
    "href": "11_Mermaid.html#häufige-fehler",
    "title": "10  Diagramme mit Mermaid.js in Quarto",
    "section": "10.4 Häufige Fehler",
    "text": "10.4 Häufige Fehler\n\nDiagramm wird nicht angezeigt: Prüfe, ob der Codeblock wirklich mit ```{mermaid} beginnt.\n\nMerkwürdige Zeichen oder Layout: Weniger Sonderzeichen verwenden, ggf. kurze Labels.\n\nSehr große Diagramme: Besser in zwei kleinere Diagramme teilen.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Diagramme mit Mermaid.js in Quarto</span>"
    ]
  },
  {
    "objectID": "11_Mermaid.html#zusammenfassung",
    "href": "11_Mermaid.html#zusammenfassung",
    "title": "10  Diagramme mit Mermaid.js in Quarto",
    "section": "10.5 Zusammenfassung",
    "text": "10.5 Zusammenfassung\n\nMit mermaid-Codeblöcken kannst du Diagramme direkt in Quarto schreiben.\n\nNützlich für Unterricht: Abläufe, Entscheidungsbäume, Organigramme, Zeitpläne, Konzeptkarten.\n\nSyntax ist einfach, Ergebnisse sind sofort im Dokument sichtbar.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Diagramme mit Mermaid.js in Quarto</span>"
    ]
  },
  {
    "objectID": "12_Quiz.html",
    "href": "12_Quiz.html",
    "title": "11  Quiz-Fragen mit Autokorrektur (ohne Programmierkenntnisse)",
    "section": "",
    "text": "11.1 Wie einfügen?\nIn diesem Kapitel bekommst du fertige Bausteine für kleine Quizfragen mit Autokorrektur in Quarto. Du musst nichts programmieren – kopiere die Beispiele und tausche nur Text und Antwortoptionen aus. Außerdem zeigen wir kurz, wie du H5P (z. B. in ILIAS) oder Google/Microsoft Forms einbindest.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Quiz-Fragen mit Autokorrektur (ohne Programmierkenntnisse)</span>"
    ]
  },
  {
    "objectID": "12_Quiz.html#wie-einfügen",
    "href": "12_Quiz.html#wie-einfügen",
    "title": "11  Quiz-Fragen mit Autokorrektur (ohne Programmierkenntnisse)",
    "section": "",
    "text": "Öffne deine .qmd-Seite.\nKopiere einen der Bausteine in den Text.\nErsetze die Beispieltexte (Frage, Antworten).\nRender klicken – fertig.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Quiz-Fragen mit Autokorrektur (ohne Programmierkenntnisse)</span>"
    ]
  },
  {
    "objectID": "12_Quiz.html#baustein-1-single-choice-eine-richtige-antwort",
    "href": "12_Quiz.html#baustein-1-single-choice-eine-richtige-antwort",
    "title": "11  Quiz-Fragen mit Autokorrektur (ohne Programmierkenntnisse)",
    "section": "11.2 Baustein 1: Single-Choice (eine richtige Antwort)",
    "text": "11.2 Baustein 1: Single-Choice (eine richtige Antwort)\nDieser Block zeigt sofort, ob die Antwort richtig ist.\n\n  Frage: Welcher Begriff passt am besten zu „produktives Scheitern“?\n   Zufällige Fehler ohne Auswertung\n   Bewusst schwierige Aufgabe vor der Instruktion\n   Reines Auswendiglernen vor der Prüfung\n  Prüfen\n  \n\nAnpassen:\n- data-correct=\"b\" legt die richtige Option fest (a, b, c …).\n- Texte in &lt;p&gt; und &lt;label&gt; austauschen.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Quiz-Fragen mit Autokorrektur (ohne Programmierkenntnisse)</span>"
    ]
  },
  {
    "objectID": "12_Quiz.html#baustein-2-multiple-choice-mehrere-richtige-antworten",
    "href": "12_Quiz.html#baustein-2-multiple-choice-mehrere-richtige-antworten",
    "title": "11  Quiz-Fragen mit Autokorrektur (ohne Programmierkenntnisse)",
    "section": "11.3 Baustein 2: Multiple-Choice (mehrere richtige Antworten)",
    "text": "11.3 Baustein 2: Multiple-Choice (mehrere richtige Antworten)\nWähle alle richtigen Aussagen; die Auswertung vergleicht exakt mit der Lösung.\n\n  Frage: Welche Aussagen zu „Flipped Classroom“ treffen zu?\n   Vorwissen wird zu Hause aktiviert.\n   Präsenzzeit ist primär für Hausaufgaben gedacht.\n   Unterrichtszeit dient vertiefender Anwendung/Interaktion.\n  Prüfen\n  \n\nAnpassen:\n- data-correct=\"a,c\" enthält alle richtigen Buchstaben, kommasepariert.\n- Aussagen anpassen.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Quiz-Fragen mit Autokorrektur (ohne Programmierkenntnisse)</span>"
    ]
  },
  {
    "objectID": "12_Quiz.html#baustein-3-kurzantwort-exakte-lösung-oder-variantenliste",
    "href": "12_Quiz.html#baustein-3-kurzantwort-exakte-lösung-oder-variantenliste",
    "title": "11  Quiz-Fragen mit Autokorrektur (ohne Programmierkenntnisse)",
    "section": "11.4 Baustein 3: Kurzantwort (exakte Lösung oder Variantenliste)",
    "text": "11.4 Baustein 3: Kurzantwort (exakte Lösung oder Variantenliste)\nDie Antwort wird mit einer Liste möglicher Lösungen verglichen (Groß-/Kleinschreibung wird ignoriert).\n\n  Frage: Wie heißt das didaktische Prinzip, bei dem Lernende zunächst an herausfordernden Problemen arbeiten und erst danach eine Instruktion erhalten?\n  \n  Prüfen\n  \n\nAnpassen:\n- In data-answers mehrere gültige Lösungen mit ; trennen.\n- Frage und Platzhalter anpassen.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Quiz-Fragen mit Autokorrektur (ohne Programmierkenntnisse)</span>"
    ]
  },
  {
    "objectID": "12_Quiz.html#einmalige-einbindung-mini-skript-für-die-auswertung",
    "href": "12_Quiz.html#einmalige-einbindung-mini-skript-für-die-auswertung",
    "title": "11  Quiz-Fragen mit Autokorrektur (ohne Programmierkenntnisse)",
    "section": "11.5 Einmalige Einbindung: Mini-Skript für die Auswertung",
    "text": "11.5 Einmalige Einbindung: Mini-Skript für die Auswertung\nFüge dieses eine Mal pro Seite ganz unten ein (oder in ein eigenes Include). Es wertet alle Quiz-Blöcke oben aus.\n\nOptional kannst du die Anzeige mit einfachem CSS minimal schöner machen:\n\n\nHinweis: Die Bausteine funktionieren in HTML-Ausgaben (Website, RevealJS). In DOCX/PDF sind interaktive Elemente nicht verfügbar.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Quiz-Fragen mit Autokorrektur (ohne Programmierkenntnisse)</span>"
    ]
  },
  {
    "objectID": "12_Quiz.html#h5p-z.-b.-in-ilias-einbinden",
    "href": "12_Quiz.html#h5p-z.-b.-in-ilias-einbinden",
    "title": "11  Quiz-Fragen mit Autokorrektur (ohne Programmierkenntnisse)",
    "section": "11.6 H5P (z. B. in ILIAS) einbinden",
    "text": "11.6 H5P (z. B. in ILIAS) einbinden\nWenn du bereits H5P-Inhalte (z. B. Multiple Choice, Drag & Drop) in ILIAS erstellt hast, kannst du sie in Quarto verlinken oder einbetten (wenn ein Embed-Code verfügbar ist).\nVariante A: Link\nWeitere Übungen findest du im ILIAS-Kurs: [H5P-Aufgaben](https://…).\nVariante B: Einbetten per iframe\n\n\nVorteil: Automatische Auswertung und ggf. Tracking bleiben bei H5P/ILIAS.\n\nNachteil: Inhalte liegen außerhalb deiner Quarto-Seite.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Quiz-Fragen mit Autokorrektur (ohne Programmierkenntnisse)</span>"
    ]
  },
  {
    "objectID": "12_Quiz.html#google-forms-oder-microsoft-forms-einbetten",
    "href": "12_Quiz.html#google-forms-oder-microsoft-forms-einbetten",
    "title": "11  Quiz-Fragen mit Autokorrektur (ohne Programmierkenntnisse)",
    "section": "11.7 Google Forms oder Microsoft Forms einbetten",
    "text": "11.7 Google Forms oder Microsoft Forms einbetten\nBeide bieten Selbstkorrektur und automatische Auswertung. Erstelle dein Formular und nutze den Einbettungs‑Code.\nWird geladen…\n\nVorteil: Sehr einfach, automatische Auswertung/Tabellen.\n\nNachteil: Externe Plattform, Design passt nicht immer perfekt.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Quiz-Fragen mit Autokorrektur (ohne Programmierkenntnisse)</span>"
    ]
  },
  {
    "objectID": "12_Quiz.html#praxisempfehlung",
    "href": "12_Quiz.html#praxisempfehlung",
    "title": "11  Quiz-Fragen mit Autokorrektur (ohne Programmierkenntnisse)",
    "section": "11.8 Praxisempfehlung",
    "text": "11.8 Praxisempfehlung\n\nFür kleine, schnelle Checks in einer Quarto‑Seite: nutze die Bausteine oben (Single‑Choice, Multiple‑Choice, Kurzantwort).\n\nFür umfangreiche Übungssets mit Noten/Tracking: nutze H5P in ILIAS oder Forms und bette die Inhalte ein.\n\nTeste die Seite im Browser, nicht nur in der Vorschau.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Quiz-Fragen mit Autokorrektur (ohne Programmierkenntnisse)</span>"
    ]
  },
  {
    "objectID": "12_Quiz.html#zusammenfassung",
    "href": "12_Quiz.html#zusammenfassung",
    "title": "11  Quiz-Fragen mit Autokorrektur (ohne Programmierkenntnisse)",
    "section": "11.9 Zusammenfassung",
    "text": "11.9 Zusammenfassung\n\nFertige, kopierbare Bausteine liefern Autokorrektur direkt in deiner Quarto‑Webseite.\n\nFür größere, auswertbare Quizze sind H5P/ILIAS oder Forms sinnvoll.\n\nInteraktive Elemente funktionieren nur in HTML‑Ausgaben.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Quiz-Fragen mit Autokorrektur (ohne Programmierkenntnisse)</span>"
    ]
  }
]