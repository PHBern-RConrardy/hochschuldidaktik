# Quarto Webseite organisieren

:::{.callout-note}
## Lernziele

Nach diesem Kapitel verstehst du:

- wie du ein Quartoprojekt aufsetzt.
- wie du Einstellungen vornimmst.
- welche Vorteile ein Projekt gegenüber Einzeldateien hat.

:::

## Projektstruktur anlegen

Für eine kleine Webseite genügt eine überschaubare Struktur:

```
mein-webprojekt/
├─ _quarto.yml
├─ index.qmd
├─ about.qmd
├─ material/
│  ├─ index.qmd
│  └─ arbeitsblatt.qmd
├─ images/
│  └─ phbern-logo.png
└─ styles.css
```

- `index.qmd`: Startseite
- `about.qmd`: Über mich oder Kontakt
- `material/`: Unterordner für Materialien
- `images/`: Grafiken und Logos
- `styles.css`: Eigene Gestaltung (optional)
- `_quarto.yml`: Zentrale Steuerdatei für die ganze Webseite

Du kannst die Ordnerstruktur händisch anlegen, aber dein Textprogramm, z.B. Rstudio kann es auch für dich anlegen.

Klicke dafür auf `file`-> `new project` -> `new directory` und wähle einen Ordner an einem passenden Ort auf deinem Festspeicher.

![Wähle hier "new website"](screenshots/rstudio_new_project.png){#fig-2}

![Die Einstellungen kannst du so lassen](screenshots/rstudio_new_project_2.png){#fig-3}

Jetzt hast du alles notwendigen Dateien mit ein paar Voreinstellungen im gewählten Ordner drin.

![Wähle rechts unten das Tab "Files", dann behältst du den Überblick](screenshots/rstudio_new_project_3.png){#fig-3}

Wenn du jetzt `render`klickst, dann erhältst du im "Viewer"-Tab die Webseite! 

![Rechts die Webseite mit Menü oben und Hyperlink in blau](screenshots/rstudio_new_project_4.png){#fig-3}

In deinen Files ist ein neuer Order `_site` hinzugekommen. Darin enthalten ist deine Webseite. Viele Webseite, sogenannte statische Webseiten, sind nichts weiter als ein Ordner voll mit Textdateien (html-Dateien), welche von deinem Internet-Browser angezeigt werden können. Später kannst du genau diese Webseite mühelos vom Internet aus zugänglich machen.

![Der neue _site Ordner enthält deine Webseite](screenshots/rstudio_new_project_4.png){#fig-4}

Du kannst auch die `html`-Dateien mit R-Studio öffnen, dann siehst du den Quellcode. Ist interessant, aber hilft uns jetzt nicht.

## Einstellungen vornehmen _quarto.yml

In Quarto ist alles über Text eingestellt. In einzelnen Dateien hast du oben das `Yaml` geschrieben. In Projekten, wie z.B. deine Webseite, gibt es eine zentrale `Yaml`-Datei, die sich automatisch auf alle Quarto-Dokumente auswirkt.  

In der `_quarto.yml` sagst du Quarto, dass es sich um eine Webseite handelt und wie Navigation und Design aussehen. Beispiel:

```yaml
project:
  type: website

website:
  title: "Meine Unterrichtswebseite"
  navbar:
    left:
      - href: index.qmd
        text: Start
      - href: about.qmd
        text: Über mich
      - text: Materialien
        menu:
          - href: material/index.qmd
            text: Übersicht
          - href: material/arbeitsblatt.qmd
            text: Arbeitsblatt
  page-navigation: true   # Vor/Zurück-Navigation am Seitenende

format:
  html:
    theme: cosmo          # Ein helles Bootstrap-Thema
    toc: true             # Inhaltsverzeichnis rechts
    number-sections: false
    css: styles.css       # Optional eigene CSS-Datei
```


![Die Yaml Datei in Rstudio](screenshots/rstudio_yaml.png){#fig-5}

:::{.callout-caution}

Benenne `_quarto.yml` und `index.qmd` nicht um. Deine Homepage, also die Startsteite, muss immer `index.qmd`heissen, sonst erhältst du einen Fehler.
:::


## Seiten anlegen und verlinken

Beispiel für eine Startseite `index.qmd`:

```markdown
---
format: html
title: "Meine_Kurswebseite"
subtitle: intrinsische Motivation für Extrinsiker
author: Richard Conrardy
date: today
---

# Herzlich Willkommen im Kurs

Freut mich, dass du hier bist.

## Thema 1

Informationen über mich findest auf [hier](about.qmd).

## Thema 2
```

![Und so sieht die Index-Page aus](screenshots/rstudio_beispiel_hoempage.png){#fig-5}

Nun ist das Datum noch auf Englisch eingestellt. Da du vermutlich global, also auf der gesamten Webseite, die Sprache auf Deutsch haben möchtest, änderst du die Einstellung in `_quarto.yml` und fügt an der **richtigen Stelle** `lang: de` hinzu. Achte auch auf die genauen Abstände.

```markdown
format:
  html:
    lang: de
    theme:
      - cosmo
      - brand
```

Render die `index.qmd` neu und das Datum wird auf Deutsch angezeigt. Magst du das Datumformat nicht, kein Problem, füge noch ein `dateformat` hinzu:

```markdown
    lang: de
    date-format: "DD.MM.YYYY"
```

Möchtest du im Dokument `index.qmd` ein spezifisches Datum angeben, musst du es im Iso-Format angeben:

```markdown
---
format: html
title: "Meine_Kurswebseite"
subtitle: intrinsische Motivation für Extrinsiker
author: Richard Conrardy
date: 2025-10-31
---
```

## Listings

Du kannst selbstverständlich deine Seiten im Menü anzeigen lassen. Aber vielleicht ist es auch ganz praktisch eine Tabelle zu haben mit deinen Lerngelegenheiten.

Erstelle zuerst einen Ordner mit den Namen "lerngelegenheiten", erstelle im Ordner mehrere `.qmd`-Files mit Titel.

Im Yaml-Header der `index.qmd`-Datei kannst du nun Folgendes hinzufügen:

```markdown
---
title: "Materialien"
listing:
  contents: lerngelegenheiten/*.qmd
  type: table
---
```

Nun hast du eine tabellarische Liste mit allen `qmd`-Dateien im Ordner `lerngelegenheiten`.

![Links das Yaml, rechts die Webseite mit Tabelle, unten die Ordnerstruktur](screenshots/rstudio_listings.png){#fig-5}


## Navigation steuern

Die Reihenfolge im Menü bestimmst du in `_quarto.yml` unter `website.navbar.left`. Alles, was dort steht, erscheint oben. Unterpunkte legst du mit `menu:` an (siehe Beispiel oben).

Optional kannst du statt einer Top-Navigation links eine Seitenleiste nutzen:

```yaml
website:
  sidebar:
    style: "docked"
    search: true
    contents:
      - index.qmd
      - about.qmd
      - section: "Lerngelegenheiten"
        contents:
          - lerngelegenheiten/lg1.qmd
          - lerngelegenheiten/lg2.qmd
```

Nur eine der beiden Varianten gleichzeitig verwenden (Navbar oder Sidebar), sonst wirkt es unruhig.

![Yaml mit gerenderter index.qmd Seite](screenshots/rstudio_navigation.png){#fig-nav}

## Einstellungen pro Seite

Globale Voreinstellungen werden in der `_quarto.yml`-Datei festgehalten. In einzelnen Dateien kann ich jedoch die Voreinstellungen übersteuern und umändern. 

Jede `.qmd`-Seite kann eigene Optionen im Kopfbereich bekommen, zum Beispiel:

```markdown
---
title: "Arbeitsblatt Prozentrechnung"
toc: true
page-layout: article
---

Hier steht der Inhalt.
```

Neben der offiziellen [Quarto-Tutorial-Seite](https://quarto.org/docs/guide/) gibt es auch eine (mehrheitlich) [komplette Referenzliste](https://quarto.org/docs/reference/formats/html.html), mit allen möglichen Einstellungen.

Hier sieht man nun auch den Unterschied zwischen Textbasierten Programmen und Programmen mit Menüführung. Im Menü sieht man übersichtlich seine Optionen, aber die Optionen müssen andererseits so eingeschränkt werden, dass man sie übersichtlich in einem Menü unterbringt. Bei textbasierten Programmen hat man keine Einschränkung an der Anzahl und am Detaillierungsgrad der Optionen, der Nutzer muss jedoch die Befehle kennen; die häufigsten kennt er auswendig, den Rest schaut er im Handbuch nach.

## Styling

Die Webseite sieht jetzt im gleich aus. Vielleicht möchtest du das Styling anpassen. Auch das Styling wird textbasiert festgehalten, dazu gibt es drei Optionen welche du auch parallel oder komplementär benutzen kannst. Mehrere Lösungen für das gleiche Problem ist nicht immer optimal, wenn du an einem Ort sagst die Schrift soll schwarz sein, am nächsten sie soll blau sein und am dritten, sie soll rot sein, ist unklar was du erhältst. Somit die allgemeine Empfehlung, nutze vorwiegend eine Option.

### Brand

Die einzige Möglichkeit mehrere Ausgabeformate (z.B. html, revealjs und pdf) gleichzeitig zu stylen ist die neuere Entwicklung `_brand.yml`. Es handelt sich um eine eigene Datei mit einem [spezifischen Definitionsschema](https://posit-dev.github.io/brand-yml/) in der Yaml-Syntax.

In dieser Datei definierst du deine Farbpalette und was welche Farbe bekommt:

1. Erstelle eine neue Datei mit dem Namen `_brand.yml` neben der Datei `_quarto.yml` im Ordner deiner Webseite.
2. Schreib in die Datei z.B. rein: 

```markdown
color:
  palette:
    black: "#1A1A1A"
    white: "#F9F9F9"
    orange: "#FF6F20"
    pink: "#FF3D7F"
  foreground: black
  background: white
  primary: orange
  danger: pink

typography:
  headings:
    color: primary

logo: 
  medium: https://upload.wikimedia.org/wikipedia/commons/3/35/Tux.svg
```

Falls du die Datei richtig benannt und am richtigen Ort hast, wird sie automatisch auf die Webseite angewandt. Falls du keine einzelne Dateien anders steuern möchtest, kannst du `brand: dateiname.yml` in der Yaml-Kopfzeile deines Dokuments angeben.

![`_brand.yml` mit neu gerenderter `index.qmd` Datei](screenshots/rstudio_brand.png){#fig-nav}

Die Einstellung wird nun für einige Ausgabeformate funktionieren:

![Brand mit revealjs-Slides](screenshots/rstudio_brand_revealjs.png){#fig-nav}

![Brand mit revealjs-Slides](screenshots/rstudio_brand_typst.png){#fig-nav}

Stand 2025 werden noch keine anderen Ausgabeformate wie `docx` oder `pptx` unterstützt.

**Hinweis:** Damit es nicht zu Überschneidungen kommt, wird die `_brand.yml`-Datei für die weiteren Ausführungen gelöscht.

### Themes

Es gibt auch vorgefertigte "Themes", z.B. kannst du eine Präsentationen im Dark-Mode (weisse Schrift auf schwarzem Hintergrund) erstellen mit 

```markdown
---
title: "Presentation"
format:
  html:
    theme: darkly
---
```

![Theme Darkly auf der Index-Seite](screenshots/rstudio_theme.png){#fig-nav}

Es gibt diverse Themes, diese sind je nach Theme gültig für ein oder mehrere Formate. Themes für Revealjs-Slides findest du in der [Dokumentation](https://quarto.org/docs/presentations/revealjs/themes.html). Quarto ermöglicht beliebige Erweiterungen zu schreiben, so gibt es auch Erweiterungen mit weiteren Themes, wie z.B. das [*R-Ladies*-Theme](https://github.com/beatrizmilz/quarto-rladies-theme). 

### Quarto.yml

Du kannst auch den Style direkt in der `_quarto.yml`-Datei einstellen. Alle möglichen Optionen findest du in der [offiziellen Referenzliste](https://quarto.org/docs/reference/projects/websites.html).

Ergänze deine `_quarto.yml`-Datei um folgende Einträge:

```markdown
website:
  sidebar:
    background: blue
format:
  html:
    backgroundcolor: red
```

![Styling über quarto.yml](screenshots/rstudio_styling_yml.png){#fig-nav}


### CSS

Cascading Style Sheets (CSS-Dateien) werden in html genutzt um Webseiten zu stylen. 
Es handelt sich um eine eigene Computersprache unabhängig von Quarto. Hier werden ein paar Beispiele gezeigt; KI-Chatbots können dir auch gut weiterhelfen die korrekte Syntax zu schreiben.

Quarto hat für deine Webseite bereits eine leere `styles.css`-Datei angelegt und sie für html auch in `_quarto.yml` explizit angegeben mit `css: styles.css`. Öffne letztere und schreib:

```css
h1 { font-size: 4.0rem; }
h2 { font-size: 2.0rem; }

h1, h2, h3, h4, h5, h6 {
  color: #800020 ;
}
```

![Überschriften in Bordeau-Rot und grösser](screenshots/rstudio_css.png){#fig-nav}
