---
title: Divs
---

:::{.callout-note}
## Lernziele

Nach diesem Kapitel verstehst du:

- wie Callouts mit `:::`-Notation aufgerufen werden.
- wie Abbildungen definiert werden.
- wie Spalten (Columns) definiert werden.
- wie Reiter definiert werden.

:::

# Grundprinzip von Divs

Viele erweiterte Elemente beginnen mit `:::` und enden mit `:::`. Die *Art* des Elements steuerst du mit einer *Klasse* in geschweiften Klammern:

```markdown
::: {.meine-klasse}
Inhalt hier …
:::
```

Quarto erkennt an der Klasse (z. B. `.meine-klasse`), was daraus werden soll. Viele Klassen sind bereits vordefiniert und erhalten ein einheitlichen Aussehen, egal ob in html-Dateien oder Revealjs-Präsentationsslides; auch in anderen Dateiformaten sollten sie ähnlich aussehen.

## Callouts (Hinweisboxen)

Callouts eignen sich für Tipps, Warnungen oder Beispiele. Häufige Varianten sind: `note`, `tip`, `warning`, `important`, `caution`.

```markdown
::: {.callout-note}
### Hinweis
So fügst du eine kurze Erklärung ein.
:::

::: {.callout-tip}
### Tipp
Das ist besonders praktisch beim Erklären von Arbeitsschritten.
:::

::: {.callout-warning}
### Achtung
Hier bitte genau lesen, sonst klappt es nicht.
:::
```

Du kannst Überschriften weglassen oder kürzer schreiben – wichtig ist die Klasse `.callout-…`.

::: {.callout-note}
### Hinweis
So fügst du eine kurze Erklärung ein.
:::

::: {.callout-tip}
### Tipp
Das ist besonders praktisch beim Erklären von Arbeitsschritten.
:::

::: {.callout-warning}
### Achtung
Hier bitte genau lesen, sonst klappt es nicht.
:::


## Figures (Bilder mit Bildunterschrift, Grösse, Ausrichtung)

Bilder, genau wie Tabellen vorher, werden typischerweise mit aufzählender Schreibweise "Abbildung ..." untertitelt. 
Dazu hast du zwei Optionen:

### Attribute einzeln steuern

```markdown
![Bildunterschrift: Logo Linux](images/Tux.svg){fig-align="center" width="15%"}
```

![Bildunterschrift: Logo Linux](images/Tux.svg){fig-align="center" width="15%"}

`fig-align="center"` zentriert das Bild.  
`width="50%"` skaliert die Breite relativ zur Seite.

Diese möglichen Attribute stammen aus der Sprace `CSS` welche bereits im Kapitel Formatieren angesprochen wurde.


### Automatische Steuerung

In wissenschaftlichen Texten werden jedoch Bilder meist als *Abbildung* beschriftet, weise ihr dazu ein *ID* zu mit `#fig-...`, z.B. `#fig-tux`.

```markdown
![Bildunterschrift: Logo Linux](images/Tux.svg){#fig-tux width="15%"}
``` 
![Logo Linux](images/Tux.svg){#fig-tux width="15%"}

Eine etwas längere Syntax mit Divs führt zum g leichen Ergebnis.

```markdown
::: {#fig-logo}
![Alternativtext](images/Tux.svg){width="15%"}

Logo von Linux
:::
``` 

::: {#fig-logo}
![ein Pinguin](images/Tux.svg){width="15%"}

Logo von Linux
:::

Mit einer ID wie `{#fig-logo}` kannst du auf diese Objekte referenzieren: siehe @fig-tux, schreibe dazu `@fig-tux`. Falls du nicht referenziert, spielt es keine Rolle ob die ID mehrfach vergeben ist.


## Spalten (Inhalte nebeneinander)

Mit Columns kannst mehrere Teile nebeneinander in Spalten darstellen.

```markdown
::: {.columns}
::: {.column width="50%"}
**Text links:** Hier steht der Hauptinhalt. Du kannst Überschriften, Listen und Bilder verwenden.
:::
::: {.column width="40%"}
**Rechts:** Ein Bild oder eine Liste.
![Logo](images/Tux.svg){#fig-tux}
:::
:::
```

::: {.columns}
::: {.column width="50%"}
**Text links:** Hier steht der Hauptinhalt. Du kannst Überschriften, Listen und Bilder verwenden.
:::
::: {.column width="40%"}
**Rechts:** Ein Bild oder eine Liste.

![Logo](images/Tux.svg){#fig-tux width="15%"}
:::
:::

Ohne `width` teilt Quarto den Platz gleich auf.

Um die Divs (`:::`) übersichtlicher zu gesalten, kannst du auch mehr als drei Doppelpunkte nutzen, es funktioniert gleich wie Klammern:


```markdown
::::: {.columns}
::: {.column width="50%"}
Text links
:::
::: {.column width="40%"}
Text rechts
:::
:::::
```

## Reiter

Reiter (Tabsets) sind nützlich, wenn du Varianten oder Beispiele trennen willst. Zum Beispiel um in Präsentationsslides mehrere Definitionen in je einem Reiter zu haben.

```markdown
::: {.panel-tabset}
## Variante A
Kurze Erklärung für die erste Variante.

## Variante B
Alternative Darstellung mit anderem Beispiel.

## Häufige Fragen
Antworten zu typischen Rückfragen.
:::
```

::: {.panel-tabset}
## Variante A
Kurze Erklärung für die erste Variante.

## Variante B
Alternative Darstellung mit anderem Beispiel.

## Häufige Fragen
Antworten zu typischen Rückfragen.
:::

Jede Überschrift der Ebene 2 (`##`) wird zu einem Tab. Du kannst innerhalb der Tabs ganz normalen Markdown verwenden.


## Eigene Divs für Gestaltung oder Logik

Wenn du später mit CSS arbeitest oder Abschnitte gezielt ansprechen willst, kannst du eigene Klassen vergeben:

```markdown
::: {.lernziel}
**Lernziele**
- Ich kann Callouts einsetzen.
- Ich kann Bilder mit Bildunterschriften zentrieren.
:::
```

Später könntest du `.lernziel` in `styles.css` gestalten (z. B. Rahmen, Hintergrund).